--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./linear_traversal_shuflist
Data file:        ./linear_traversal_shuflist_cachegrind
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                         I1mr            ILmr            Dr                       D1mr                    DLmr                    Dw                       D1mw                 DLmw                 
--------------------------------------------------------------------------------
2,654,536,085,800 (100.0%) 16,909 (100.0%) 12,237 (100.0%) 937,981,601,940 (100.0%) 17,649,663,557 (100.0%) 12,250,011,954 (100.0%) 727,779,484,229 (100.0%) 607,744,174 (100.0%) 587,168,378 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                       I1mr           ILmr           Dr                       D1mr                   DLmr                   Dw                      D1mw                 DLmw                  file:function
--------------------------------------------------------------------------------
396,801,419,731 (14.95%)   243 ( 1.44%)   163 ( 1.33%)  54,075,966,924 ( 5.77%) 5,080,159,746 (28.78%) 2,590,960,613 (21.15%) 69,708,060,458 ( 9.58%)           0                    0           /usr/include/c++/11.1.0/bits/list.tcc:std::__cxx11::list<int, std::allocator<int> >::merge(std::__cxx11::list<int, std::allocator<int> >&&)
292,596,462,504 (11.02%)     0              0          146,298,231,252 (15.60%)             0                      0          73,149,115,626 (10.05%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::operator!=(std::_List_iterator<int> const&, std::_List_iterator<int> const&)
241,790,007,410 ( 9.11%)     0              0           72,537,002,223 ( 7.73%)             0                      0          72,537,002,223 ( 9.97%)          79 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_node<int>::_M_valptr()
233,629,020,470 ( 8.80%)     2 ( 0.01%)     1 ( 0.01%)  93,451,608,188 ( 9.96%)             0                      0          70,088,706,141 ( 9.63%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::operator*() const
217,611,006,669 ( 8.20%)     1 ( 0.01%)     1 ( 0.01%)  72,537,002,223 ( 7.73%)             0                      0          72,537,002,223 ( 9.97%)           0                    0           /usr/include/c++/11.1.0/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr()
158,725,574,238 ( 5.98%)     2 ( 0.01%)     1 ( 0.01%) 101,007,183,606 (10.77%) 3,040,341,735 (17.23%) 2,589,917,125 (21.14%) 43,288,792,974 ( 5.95%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::operator++()
145,074,004,446 ( 5.47%)     0              0           72,537,002,223 ( 7.73%)             0                      0          48,358,001,482 ( 6.64%)          79 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_addr()
 82,412,514,704 ( 3.10%)     2 ( 0.01%)     1 ( 0.01%)  25,753,910,845 ( 2.75%)             0                      0          30,904,693,014 ( 4.25%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_transfer(std::_List_iterator<int>, std::_List_iterator<int>, std::_List_iterator<int>)
 72,110,950,366 ( 2.72%)   160 ( 0.95%)   106 ( 0.87%)  25,753,910,845 ( 2.75%) 4,224,009,248 (23.93%) 2,144,725,272 (17.51%) 30,904,693,014 ( 4.25%)     491,514 ( 0.08%)       1,836 ( 0.00%)  /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc:std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)
 64,082,277,581 ( 2.41%)     1 ( 0.01%)     1 ( 0.01%)   8,544,307,955 ( 0.91%) 4,269,066,777 (24.19%) 3,974,211,099 (32.44%) 12,816,464,849 ( 1.76%)           0                    0           /usr/include/c++/11.1.0/bits/stl_numeric.h:int std::accumulate<std::_List_iterator<int>, int>(std::_List_iterator<int>, std::_List_iterator<int>, int)
 40,805,083,280 ( 1.54%)     1 ( 0.01%)     1 ( 0.01%)  16,322,033,312 ( 1.74%)             0                      0          16,322,033,312 ( 2.24%)          80 ( 0.00%)          53 ( 0.00%)  /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::_List_iterator(std::__detail::_List_node_base*)
 33,868,083,481 ( 1.28%)   376 ( 2.22%)   272 ( 2.22%)   9,385,132,181 ( 1.00%)   196,055,567 ( 1.11%)   192,293,206 ( 1.57%)  4,080,494,030 ( 0.56%)          80 ( 0.00%)          52 ( 0.00%)  ???:_int_free
 33,460,018,082 ( 1.26%)    82 ( 0.48%)    55 ( 0.45%)   9,793,176,024 ( 1.04%)             0                      0          10,609,274,026 ( 1.46%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::swap(std::__cxx11::list<int, std::allocator<int> >&)
 33,051,997,107 ( 1.25%)    84 ( 0.50%)    57 ( 0.47%)   5,712,690,858 ( 0.61%)             0                      0           8,160,986,940 ( 1.12%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::splice(std::_List_const_iterator<int>, std::__cxx11::list<int, std::allocator<int> >&&, std::_List_const_iterator<int>)
 31,419,860,041 ( 1.18%)   330 ( 1.95%)   220 ( 1.80%)   6,936,843,357 ( 0.74%)           568 ( 0.00%)           273 ( 0.00%)  5,712,699,502 ( 0.78%)          80 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/bits/list.tcc:std::__cxx11::list<int, std::allocator<int> >::sort()
 31,011,891,523 ( 1.17%)     1 ( 0.01%)     1 ( 0.01%)  13,057,638,536 ( 1.39%)         5,830 ( 0.00%)           542 ( 0.00%)  6,528,819,268 ( 0.90%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin()
 24,482,961,612 ( 0.92%)     1 ( 0.01%)     1 ( 0.01%)  12,241,480,806 ( 1.31%)             0                      0           8,160,987,204 ( 1.12%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator()
 23,258,812,779 ( 0.88%)    80 ( 0.47%)    53 ( 0.43%)   9,793,184,328 ( 1.04%)             0                      0           4,896,592,164 ( 0.67%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_const_iterator<int>::_M_const_cast() const
 22,034,798,460 ( 0.83%)     4 ( 0.02%)     2 ( 0.02%)   8,569,088,290 ( 0.91%)             0                      0           4,896,621,880 ( 0.67%)          79 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end()
 21,626,615,391 ( 0.81%)   136 ( 0.80%)    83 ( 0.68%)   6,120,740,205 ( 0.65%)             0                      0           6,936,838,899 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)
 20,810,516,697 ( 0.78%)     3 ( 0.02%)     3 ( 0.02%)   5,712,690,858 ( 0.61%)             0                      0           6,120,740,205 ( 0.84%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_node<int>* std::__cxx11::list<int, std::allocator<int> >::_M_create_node<int>(int&&)
 20,402,461,090 ( 0.77%)     2 ( 0.01%)     1 ( 0.01%)   8,160,984,436 ( 0.87%)             0                      0           8,160,984,436 ( 1.12%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_set_size(unsigned long)
 18,288,308,983 ( 0.69%)    91 ( 0.54%)    58 ( 0.47%)   4,896,592,195 ( 0.52%)           713 ( 0.00%)           408 ( 0.00%)  2,281,227,292 ( 0.31%)           0                    0           ???:malloc
 17,954,187,944 ( 0.68%)    79 ( 0.47%)    53 ( 0.43%)   4,080,497,260 ( 0.44%)             0                      0           5,712,696,164 ( 0.78%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_check_equal_allocators(std::__cxx11::list<int, std::allocator<int> >&)
 17,138,073,498 ( 0.65%)    80 ( 0.47%)    53 ( 0.43%)   9,793,184,856 ( 1.04%)     1,131,475 ( 0.01%)         7,432 ( 0.00%)  4,896,592,428 ( 0.67%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_size() const
 16,618,511,838 ( 0.63%)   619 ( 3.66%)   411 ( 3.36%)   3,961,098,019 ( 0.42%)   371,788,753 ( 2.11%)   355,964,765 ( 2.91%)  2,876,464,772 ( 0.40%)  18,587,257 ( 3.06%)  18,587,173 ( 3.17%)  ???:_int_malloc
 15,913,934,387 ( 0.60%)     1 ( 0.01%)     1 ( 0.01%)   7,344,892,794 ( 0.78%)     1,012,633 ( 0.01%)         3,700 ( 0.00%)  4,896,595,196 ( 0.67%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_inc_size(unsigned long)
 13,905,138,199 ( 0.52%)   161 ( 0.95%)   105 ( 0.86%)   7,361,158,253 ( 0.78%)    21,712,711 ( 0.12%)             0           1,636,322,661 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()
 13,465,628,451 ( 0.51%)     0              0            6,120,740,205 ( 0.65%)             0                      0           4,896,592,164 ( 0.67%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_const_iterator<int>::_List_const_iterator(std::_List_iterator<int> const&)
 13,295,737,482 ( 0.50%)    89 ( 0.53%)    57 ( 0.47%)   6,133,411,291 ( 0.65%)    21,336,856 ( 0.12%)            26 ( 0.00%)    822,462,995 ( 0.11%)           0                    0           /usr/include/c++/11.1.0/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()
 13,057,568,032 ( 0.49%)    54 ( 0.32%)    54 ( 0.44%)   4,080,490,010 ( 0.44%)       125,222 ( 0.00%)           572 ( 0.00%)  4,896,588,012 ( 0.67%)   3,045,577 ( 0.50%)      14,132 ( 0.00%)  /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc:std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)
 12,241,456,590 ( 0.46%)     1 ( 0.01%)     1 ( 0.01%)   6,120,728,295 ( 0.65%)     2,277,698 ( 0.01%)        10,919 ( 0.00%)  2,448,291,318 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::empty() const
 11,833,431,063 ( 0.45%)   160 ( 0.95%)   106 ( 0.87%)   4,080,493,470 ( 0.44%)     7,937,626 ( 0.04%)     5,727,219 ( 0.05%)  1,632,197,388 ( 0.22%)           0                    0           ???:free
 11,017,332,369 ( 0.42%)    81 ( 0.48%)    53 ( 0.43%)   2,856,345,429 ( 0.30%)             0                      0           3,672,444,123 ( 0.50%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<int>(std::_List_iterator<int>, int&&)
 10,609,283,022 ( 0.40%)     2 ( 0.01%)     2 ( 0.02%)   2,040,246,735 ( 0.22%)             0                      0           2,448,296,082 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::allocate(unsigned long, void const*)
 10,609,274,026 ( 0.40%)     0              0            3,264,392,008 ( 0.35%)             0                      0           3,264,392,008 ( 0.45%)           0                    0           /usr/include/c++/11.1.0/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<std::_List_node<int> >, std::_List_node<int> >::_S_on_swap(std::allocator<std::_List_node<int> >&, std::allocator<std::_List_node<int> >&)
 10,201,312,875 ( 0.38%)     2 ( 0.01%)     2 ( 0.02%)   4,080,525,150 ( 0.44%)   407,998,695 ( 2.31%)   396,151,155 ( 3.23%)  2,856,361,269 ( 0.39%)           0                    0           /usr/include/c++/11.1.0/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear()
  9,793,184,328 ( 0.37%)    80 ( 0.47%)    53 ( 0.43%)   4,896,592,164 ( 0.52%)             0                      0           2,448,296,082 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::operator==(std::_List_const_iterator<int> const&, std::_List_const_iterator<int> const&)
  9,793,184,328 ( 0.37%)     1 ( 0.01%)     1 ( 0.01%)   4,896,592,164 ( 0.52%)             0                      0           3,264,394,776 ( 0.45%)           0                    0           /usr/include/c++/11.1.0/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&)
  9,385,134,981 ( 0.35%)    80 ( 0.47%)    53 ( 0.43%)   2,448,296,082 ( 0.26%)             0                      0           2,856,345,429 ( 0.39%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::push_back(int&&)
  8,569,036,287 ( 0.32%)     2 ( 0.01%)     1 ( 0.01%)   2,448,296,082 ( 0.26%)             0                      0           2,856,345,429 ( 0.39%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::splice(std::_List_const_iterator<int>, std::__cxx11::list<int, std::allocator<int> >&, std::_List_const_iterator<int>)
  8,187,223,988 ( 0.31%)    80 ( 0.47%)    52 ( 0.42%)   3,276,152,073 ( 0.35%)             0                      0           2,452,753,498 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/uniform_int_dist.h:unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)
  8,160,986,940 ( 0.31%)     1 ( 0.01%)     1 ( 0.01%)   2,448,296,082 ( 0.26%)             0                      0           3,264,394,776 ( 0.45%) 177,594,388 (29.22%) 172,132,532 (29.32%)  /usr/include/c++/11.1.0/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::construct<int, int>(int*, int&&)
  7,344,888,246 ( 0.28%)     3 ( 0.02%)     2 ( 0.02%)   2,040,246,735 ( 0.22%)             0                      0           2,448,296,082 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::construct<int, int>(std::allocator<std::_List_node<int> >&, int*, int&&)
  7,344,888,246 ( 0.28%)     0              0            1,632,197,388 ( 0.17%)             0                      0           2,040,246,735 ( 0.28%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::deallocate(std::_List_node<int>*, unsigned long)
  7,191,037,195 ( 0.27%)   311 ( 1.84%)   225 ( 1.84%)   7,191,036,176 ( 0.77%)     1,873,932 ( 0.01%)         7,593 ( 0.00%)             54 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  ???:???
  6,936,838,899 ( 0.26%)     2 ( 0.01%)     1 ( 0.01%)   2,448,296,082 ( 0.26%)             0                      0           2,856,345,429 ( 0.39%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::__allocated_ptr(std::allocator<std::_List_node<int> >&, std::_List_node<int>*)
  6,528,801,680 ( 0.25%)     0              0            1,632,200,420 ( 0.17%)     1,828,789 ( 0.01%)         6,510 ( 0.00%)  2,040,250,525 ( 0.28%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::merge(std::__cxx11::list<int, std::allocator<int> >&)
  6,528,791,152 ( 0.25%)     2 ( 0.01%)     1 ( 0.01%)     816,098,934 ( 0.09%)             0                      0           1,632,197,868 ( 0.22%) 408,001,069 (67.13%) 396,421,989 (67.51%)  /usr/include/c++/11.1.0/bits/stl_numeric.h:void std::iota<std::_List_iterator<int>, int>(std::_List_iterator<int>, std::_List_iterator<int>, int)
  6,120,746,328 ( 0.23%)   430 ( 2.54%)   297 ( 2.43%)   1,224,148,933 ( 0.13%)           162 ( 0.00%)           107 ( 0.00%)  1,224,149,253 ( 0.17%)           2 ( 0.00%)           0           /home/jason/PP/usingstdcpp2015-master/linear_traversal_shuflist.cpp:main
  6,120,740,205 ( 0.23%)     1 ( 0.01%)     0            2,040,246,735 ( 0.22%)             0                      0           2,040,246,735 ( 0.28%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::deallocate(std::allocator<std::_List_node<int> >&, std::_List_node<int>*, unsigned long)
  5,712,696,164 ( 0.22%)     0              0            1,632,198,904 ( 0.17%)             0                      0           2,448,298,356 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/allocator.h:std::__alloc_neq<std::allocator<std::_List_node<int> >, true>::_S_do_it(std::allocator<std::_List_node<int> > const&, std::allocator<std::_List_node<int> > const&)
  5,712,690,858 ( 0.22%)     0              0            3,264,394,776 ( 0.35%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const
  5,712,690,858 ( 0.22%)     0              0            1,632,197,388 ( 0.17%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_put_node(std::_List_node<int>*)
  5,712,686,014 ( 0.22%)     0              0            1,632,196,004 ( 0.17%)             0                      0           2,448,294,006 ( 0.34%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:void std::__alloc_on_swap<std::allocator<std::_List_node<int> > >(std::allocator<std::_List_node<int> >&, std::allocator<std::_List_node<int> >&)
  5,304,641,511 ( 0.20%)    80 ( 0.47%)    53 ( 0.43%)   2,448,296,082 ( 0.26%)       919,751 ( 0.01%)         3,318 ( 0.00%)  1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_dec_size(unsigned long)
  5,304,641,511 ( 0.20%)     2 ( 0.01%)     2 ( 0.02%)   2,040,246,735 ( 0.22%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&)
  5,304,641,511 ( 0.20%)     1 ( 0.01%)     1 ( 0.01%)   1,632,197,388 ( 0.17%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::allocate(std::allocator<std::_List_node<int> >&, unsigned long)
  5,304,641,511 ( 0.20%)     0              0            1,632,197,388 ( 0.17%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::destroy<int>(std::allocator<std::_List_node<int> >&, int*)
  4,896,596,712 ( 0.18%)     0              0            2,448,298,356 ( 0.26%)             0                      0           1,632,198,904 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/move.h:std::__cxx11::list<int, std::allocator<int> >* std::__addressof<std::__cxx11::list<int, std::allocator<int> > >(std::__cxx11::list<int, std::allocator<int> >&)
  4,896,596,712 ( 0.18%)     0              0            2,448,298,356 ( 0.26%)             0                      0           1,632,198,904 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/move.h:std::remove_reference<std::__cxx11::list<int, std::allocator<int> >&>::type&& std::move<std::__cxx11::list<int, std::allocator<int> >&>(std::__cxx11::list<int, std::allocator<int> >&)
  4,896,592,164 ( 0.18%)    82 ( 0.48%)    53 ( 0.43%)   1,224,148,041 ( 0.13%)            80 ( 0.00%)            51 ( 0.00%)    816,098,694 ( 0.11%)           0                    0           /build/gcc/src/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  4,488,542,817 ( 0.17%)     0              0            1,632,197,388 ( 0.17%)             0                      0             816,098,694 ( 0.11%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::~__allocated_ptr()
  4,080,493,470 ( 0.15%)     1 ( 0.01%)     1 ( 0.01%)   1,224,148,041 ( 0.13%)             0                      0           1,224,148,041 ( 0.17%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_node()
  3,672,450,945 ( 0.14%)     0              0            1,224,150,315 ( 0.13%)             0                      0           1,224,150,315 ( 0.17%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_node_count() const
  3,672,450,945 ( 0.14%)     0              0            1,224,150,315 ( 0.13%)             0                      0           1,224,150,315 ( 0.17%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::size() const
  3,672,444,123 ( 0.14%)     0              0            1,632,197,388 ( 0.17%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::operator=(decltype(nullptr))
  3,264,394,776 ( 0.12%)    80 ( 0.47%)    52 ( 0.42%)   1,224,148,041 ( 0.13%)             0                      0           1,632,197,388 ( 0.22%)           0                    0           /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc:std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)
  2,856,345,429 ( 0.11%)    81 ( 0.48%)    53 ( 0.43%)   1,632,197,388 ( 0.17%)             0                      0             816,098,694 ( 0.11%)           0                    0           /usr/include/c++/11.1.0/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::b() const
  2,856,345,429 ( 0.11%)     1 ( 0.01%)     1 ( 0.01%)   1,224,148,041 ( 0.13%)             0                      0           1,224,148,041 ( 0.17%)           0                    0           /usr/include/c++/11.1.0/new:operator new(unsigned long, void*)
  2,856,345,429 ( 0.11%)     0              0              816,098,694 ( 0.09%)             0                      0           1,224,148,041 ( 0.17%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::destroy<int>(int*)

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jason/PP/usingstdcpp2015-master/linear_traversal_shuflist.cpp
--------------------------------------------------------------------------------
Ir                     I1mr         ILmr        Dr                     D1mr           DLmr         Dw                     D1mw           DLmw         

-- line 9 ----------------------------------------
            .            .           .                      .              .            .                      .              .            .           #include <algorithm>
            .            .           .                      .              .            .                      .              .            .           #include <array>
            .            .           .                      .              .            .                      .              .            .           #include <chrono>
            .            .           .                      .              .            .                      .              .            .           #include <numeric> 
            .            .           .                      .              .            .                      .              .            .               
            .            .           .                      .              .            .                      .              .            .           std::chrono::high_resolution_clock::time_point measure_start,measure_pause;
            .            .           .                      .              .            .                      .              .            .                   
            .            .           .                      .              .            .                      .              .            .           template<typename F>
          640 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)            80 ( 0.00%)    80 ( 0.00%)  53 ( 0.00%)           320 ( 0.00%)     0            0           double measure(F f)
            .            .           .                      .              .            .                      .              .            .           {
            .            .           .                      .              .            .                      .              .            .             using namespace std::chrono;
            .            .           .                      .              .            .                      .              .            .                   
            .            .           .                      .              .            .                      .              .            .             static const int              num_trials=10;
            .            .           .                      .              .            .                      .              .            .             static const milliseconds     min_time_per_trial(200);
            .            .           .                      .              .            .                      .              .            .             std::array<double,num_trials> trials;
            .            .           .                      .              .            .                      .              .            .             volatile decltype(f())        res; /* to avoid optimizing f() away */
            .            .           .                      .              .            .                      .              .            .                   
        2,720 ( 0.00%)  82 ( 0.48%) 54 ( 0.44%)         1,680 ( 0.00%)     0            0                     80 ( 0.00%)     0            0             for(int i=0;i<num_trials;++i){
          800 ( 0.00%)   0           0                      0              0            0                    800 ( 0.00%)     0            0               int                               runs=0;
          800 ( 0.00%)   0           0                      0              0            0                    800 ( 0.00%)     0            0               high_resolution_clock::time_point t2;
            .            .           .                      .              .            .                      .              .            .                   
        1,600 ( 0.00%)   0           0                      0              0            0                  1,600 ( 0.00%)    80 ( 0.00%)  52 ( 0.00%)      measure_start=high_resolution_clock::now();
            .            .           .                      .              .            .                      .              .            .               do{
       23,332 ( 0.00%)   0           0                      0              0            0                 11,666 ( 0.00%)     0            0                 res=f();
        5,833 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)         5,833 ( 0.00%)     0            0                      0              0            0                 ++runs;
       11,666 ( 0.00%)   0           0                      0              0            0                 11,666 ( 0.00%)     0            0                 t2=high_resolution_clock::now();
       75,829 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)             0              0            0                 17,499 ( 0.00%) 5,833 ( 0.00%) 580 ( 0.00%)      }while(t2-measure_start<min_time_per_trial);
       23,200 ( 0.00%)   2 ( 0.01%)  1 ( 0.01%)         2,400 ( 0.00%)     0            0                  6,400 ( 0.00%)   320 ( 0.00%) 208 ( 0.00%)      trials[i]=duration_cast<duration<double>>(t2-measure_start).count()/runs;
            .            .           .                      .              .            .                      .              .            .             }
           80 ( 0.00%)   0           0                      0              0            0                      0              0            0             (void)(res); /* var not used warn */
            .            .           .                      .              .            .                      .              .            .                   
          800 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)             0              0            0                    240 ( 0.00%)     0            0             std::sort(trials.begin(),trials.end());
          640 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)            80 ( 0.00%)     0            0                     80 ( 0.00%)     0            0             return std::accumulate(
        1,600 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)            80 ( 0.00%)     0            0                    240 ( 0.00%)     0            0               trials.begin()+2,trials.end()-2,0.0)/(trials.size()-4)*1E6;
          560 ( 0.00%)   1 ( 0.01%)  0                    400 ( 0.00%)    80 ( 0.00%)  52 ( 0.00%)             0              0            0           }
            .            .           .                      .              .            .                      .              .            .            
            .            .           .                      .              .            .                      .              .            .           template<typename Size,typename F>
          400 ( 0.00%)   3 ( 0.02%)  2 ( 0.02%)             0              0            0                    240 ( 0.00%)     0            0           double measure(Size n,F f)
            .            .           .                      .              .            .                      .              .            .           {
        1,040 ( 0.00%)   0           0                    160 ( 0.00%)     0            0                     80 ( 0.00%)     0            0             return measure(f)/n;
          240 ( 0.00%)   0           0                    160 ( 0.00%)     0            0                      0              0            0           }
            .            .           .                      .              .            .                      .              .            .           
            .            .           .                      .              .            .                      .              .            .           void pause_timing()
            .            .           .                      .              .            .                      .              .            .           {
            .            .           .                      .              .            .                      .              .            .             measure_pause=std::chrono::high_resolution_clock::now();
            .            .           .                      .              .            .                      .              .            .           }
            .            .           .                      .              .            .                      .              .            .                   
            .            .           .                      .              .            .                      .              .            .           void resume_timing()
            .            .           .                      .              .            .                      .              .            .           {
-- line 57 ----------------------------------------
-- line 61 ----------------------------------------
            .            .           .                      .              .            .                      .              .            .           #include <algorithm>
            .            .           .                      .              .            .                      .              .            .           #include <iostream>
            .            .           .                      .              .            .                      .              .            .           #include <numeric>
            .            .           .                      .              .            .                      .              .            .           #include <list>
            .            .           .                      .              .            .                      .              .            .           #include <random>
            .            .           .                      .              .            .                      .              .            .           #include <vector>
            .            .           .                      .              .            .                      .              .            .           
            .            .           .                      .              .            .                      .              .            .           int main()
            7 ( 0.00%)   2 ( 0.01%)  2 ( 0.02%)             1 ( 0.00%)     0            0                      3 ( 0.00%)     0            0           {
            3 ( 0.00%)   0           0                      0              0            0                      3 ( 0.00%)     2 ( 0.00%)   0             std::size_t n0=10000,n1=40000000,dn=2000;
            2 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)             1 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)             1 ( 0.00%)     0            0             double      fdn=1.1;    
            .            .           .                      .              .            .                      .              .            .           
            9 ( 0.00%)   0           0                      1 ( 0.00%)     0            0                      2 ( 0.00%)     0            0             std::cout<<"linear traversal:"<<std::endl;
            9 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)             1 ( 0.00%)     0            0                      2 ( 0.00%)     0            0             std::cout<<"n;vector;list;shuffled list"<<std::endl;
            .            .           .                      .              .            .                      .              .            .               
        1,206 ( 0.00%)  54 ( 0.32%) 53 ( 0.43%)           483 ( 0.00%)    80 ( 0.00%)  53 ( 0.00%)            81 ( 0.00%)     0            0             for(std::size_t n=n0;n<=n1;n+=dn,dn=(unsigned int)(dn*fdn)){
          800 ( 0.00%)  53 ( 0.31%) 29 ( 0.24%)            80 ( 0.00%)     0            0                    160 ( 0.00%)     0            0               std::cout<<n<<";";
          240 ( 0.00%)   0           0                      0              0            0                     80 ( 0.00%)     0            0               std::mt19937                    gen;
          560 ( 0.00%)  80 ( 0.47%) 52 ( 0.42%)            80 ( 0.00%)     0            0                     80 ( 0.00%)     0            0               std::uniform_int_distribution<> rnd(0,n-1);
          240 ( 0.00%)   0           0                      0              0            0                     80 ( 0.00%)     0            0               std::list<int>                  l;
6,120,740,605 ( 0.23%)  80 ( 0.47%) 52 ( 0.42%) 1,224,148,201 ( 0.13%)     0            0          1,224,148,121 ( 0.17%)     0            0               for(std::size_t i=0;i<n;++i)l.push_back(rnd(gen));
          240 ( 0.00%)  78 ( 0.46%) 53 ( 0.43%)             0              0            0                     80 ( 0.00%)     0            0               l.sort();
          880 ( 0.00%)   0           0                      0              0            0                    240 ( 0.00%)     0            0               std::iota(l.begin(),l.end(),0);
       29,165 ( 0.00%) 110 ( 0.65%) 82 ( 0.67%)             0              0            0                 17,499 ( 0.00%)     0            0               std::cout<<measure(n,[&](){
       75,829 ( 0.00%)   0           0                 23,332 ( 0.00%)     0            0                 17,499 ( 0.00%)     0            0                 return std::accumulate(l.begin(),l.end(),0);
       18,779 ( 0.00%)   1 ( 0.01%)  1 ( 0.01%)        17,579 ( 0.00%) 5,913 ( 0.00%) 632 ( 0.00%)           240 ( 0.00%)     0            0               })<<"\n";
          240 ( 0.00%)  80 ( 0.47%) 53 ( 0.43%)             0              0            0                     80 ( 0.00%)     0            0             }
           26 ( 0.00%)   2 ( 0.01%)  2 ( 0.02%)            11 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)             5 ( 0.00%)     0            0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/stl_list.h
--------------------------------------------------------------------------------
Ir                       I1mr        ILmr        Dr                       D1mr                   DLmr                   Dw                      D1mw         DLmw         

-- line 101 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .               /// The %list node header.
              .           .           .                        .                      .                      .                       .            .            .               struct _List_node_header : public _List_node_base
              .           .           .                        .                      .                      .                       .            .            .               {
              .           .           .                        .                      .                      .                       .            .            .           #if _GLIBCXX_USE_CXX11_ABI
              .           .           .                        .                      .                      .                       .            .            .                 std::size_t _M_size;
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
         21,120 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0                  10,560 ( 0.00%)   0            0                 _List_node_header() _GLIBCXX_NOEXCEPT
         31,680 ( 0.00%)  0           0                   15,840 ( 0.00%)             0                      0                   5,280 ( 0.00%)   0            0                 { _M_init(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 _List_node_header(_List_node_header&& __x) noexcept
              .           .           .                        .                      .                      .                       .            .            .                 : _List_node_base{ __x._M_next, __x._M_prev }
              .           .           .                        .                      .                      .                       .            .            .           # if _GLIBCXX_USE_CXX11_ABI
              .           .           .                        .                      .                      .                       .            .            .                 , _M_size(__x._M_size)
              .           .           .                        .                      .                      .                       .            .            .           # endif
              .           .           .                        .                      .                      .                       .            .            .                 {
-- line 118 ----------------------------------------
-- line 141 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           	    _M_size = __x._M_size;
              .           .           .                        .                      .                      .                       .            .            .           # endif
              .           .           .                        .                      .                      .                       .            .            .           	    __x._M_init();
              .           .           .                        .                      .                      .                       .            .            .           	  }
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
         15,840 ( 0.00%)  0           0                        0                      0                      0                  10,560 ( 0.00%)   0            0                 _M_init() _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
         36,960 ( 0.00%)  0           0                   26,400 ( 0.00%)             0                      0                  10,560 ( 0.00%) 874 ( 0.00%) 520 ( 0.00%)  	this->_M_next = this->_M_prev = this;
              .           .           .                        .                      .                      .                       .            .            .           #if _GLIBCXX_USE_CXX11_ABI
         10,560 ( 0.00%)  0           0                    5,280 ( 0.00%)             0                      0                   5,280 ( 0.00%) 394 ( 0.00%) 208 ( 0.00%)  	this->_M_size = 0;
              .           .           .                        .                      .                      .                       .            .            .           #endif
         15,840 ( 0.00%)  0           0                   10,560 ( 0.00%)             0                      0                       0            0            0                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .               private:
              .           .           .                        .                      .                      .                       .            .            .                 _List_node_base* _M_base() { return this; }
              .           .           .                        .                      .                      .                       .            .            .               };
              .           .           .                        .                      .                      .                       .            .            .             } // namespace detail
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .             /// An actual node in the %list.
              .           .           .                        .                      .                      .                       .            .            .             template<typename _Tp>
              .           .           .                        .                      .                      .                       .            .            .               struct _List_node : public __detail::_List_node_base
              .           .           .                        .                      .                      .                       .            .            .               {
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
241,790,007,410 ( 9.11%)  0           0           72,537,002,223 ( 7.73%)             0                      0          72,537,002,223 ( 9.97%)  79 ( 0.00%)  52 ( 0.00%)        _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
              .           .           .                        .                      .                      .                       .            .            .                 _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 _Tp _M_data;
              .           .           .                        .                      .                      .                       .            .            .                 _Tp*       _M_valptr()       { return std::__addressof(_M_data); }
              .           .           .                        .                      .                      .                       .            .            .                 _Tp const* _M_valptr() const { return std::__addressof(_M_data); }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .               };
              .           .           .                        .                      .                      .                       .            .            .           
-- line 178 ----------------------------------------
-- line 192 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 typedef _Tp				value_type;
              .           .           .                        .                      .                      .                       .            .            .                 typedef _Tp*				pointer;
              .           .           .                        .                      .                      .                       .            .            .                 typedef _Tp&				reference;
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _List_iterator() _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 : _M_node() { }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 explicit
 16,322,033,312 ( 0.61%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0          12,241,524,984 ( 1.68%)  80 ( 0.00%)  53 ( 0.00%)        _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 24,483,049,968 ( 0.92%)  0           0           16,322,033,312 ( 1.74%)             0                      0           4,080,508,328 ( 0.56%)   0            0                 : _M_node(__x) { }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _Self
              .           .           .                        .                      .                      .                       .            .            .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return *this; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Must downcast from _List_node_base to _List_node to get to value.
              .           .           .                        .                      .                      .                       .            .            .                 reference
 93,451,608,188 ( 3.52%)  0           0                        0                      0                      0          46,725,804,094 ( 6.42%)   0            0                 operator*() const _GLIBCXX_NOEXCEPT
140,177,412,282 ( 5.28%)  2 ( 0.01%)  1 ( 0.01%)  93,451,608,188 ( 9.96%)             0                      0          23,362,902,047 ( 3.21%)   0            0                 { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 pointer
              .           .           .                        .                      .                      .                       .            .            .                 operator->() const _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return static_cast<_Node*>(_M_node)->_M_valptr(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _Self&
 43,288,792,974 ( 1.63%)  2 ( 0.01%)  1 ( 0.01%)               0                      0                      0          28,859,195,316 ( 3.97%)   0            0                 operator++() _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
 72,147,988,290 ( 2.72%)  0           0           57,718,390,632 ( 6.15%) 3,040,341,735 (17.23%) 2,589,917,125 (21.14%) 14,429,597,658 ( 1.98%)   0            0           	_M_node = _M_node->_M_next;
 14,429,597,658 ( 0.54%)  0           0           14,429,597,658 ( 1.54%)             0                      0                       0            0            0           	return *this;
 28,859,195,316 ( 1.09%)  0           0           28,859,195,316 ( 3.08%)             0                      0                       0            0            0                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _Self
              .           .           .                        .                      .                      .                       .            .            .                 operator++(int) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	_Self __tmp = *this;
              .           .           .                        .                      .                      .                       .            .            .           	_M_node = _M_node->_M_next;
              .           .           .                        .                      .                      .                       .            .            .           	return __tmp;
              .           .           .                        .                      .                      .                       .            .            .                 }
-- line 229 ----------------------------------------
-- line 244 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 friend bool
              .           .           .                        .                      .                      .                       .            .            .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return __x._M_node == __y._M_node; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cpp_impl_three_way_comparison < 201907L
              .           .           .                        .                      .                      .                       .            .            .                 friend bool
 97,532,154,168 ( 3.67%)  0           0                        0                      0                      0          73,149,115,626 (10.05%)   0            0                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
195,064,308,336 ( 7.35%)  0           0          146,298,231,252 (15.60%)             0                      0                       0            0            0                 { return __x._M_node != __y._M_node; }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // The only member points to the %list element.
              .           .           .                        .                      .                      .                       .            .            .                 __detail::_List_node_base* _M_node;
              .           .           .                        .                      .                      .                       .            .            .               };
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .             /**
              .           .           .                        .                      .                      .                       .            .            .              *  @brief A list::const_iterator.
-- line 261 ----------------------------------------
-- line 278 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 _List_const_iterator() _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 : _M_node() { }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 explicit
              .           .           .                        .                      .                      .                       .            .            .                 _List_const_iterator(const __detail::_List_node_base* __x)
              .           .           .                        .                      .                      .                       .            .            .                 _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 : _M_node(__x) { }
              .           .           .                        .                      .                      .                       .            .            .           
  4,896,592,164 ( 0.18%)  0           0                        0                      0                      0           3,672,444,123 ( 0.50%)   0            0                 _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  8,569,036,287 ( 0.32%)  0           0            6,120,740,205 ( 0.65%)             0                      0           1,224,148,041 ( 0.17%)   0            0                 : _M_node(__x._M_node) { }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 iterator
  8,569,036,287 ( 0.32%) 80 ( 0.47%) 53 ( 0.43%)   1,224,148,041 ( 0.13%)             0                      0           3,672,444,123 ( 0.50%)   0            0                 _M_const_cast() const _GLIBCXX_NOEXCEPT
 14,689,776,492 ( 0.55%)  0           0            8,569,036,287 ( 0.91%)             0                      0           1,224,148,041 ( 0.17%)   0            0                 { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Must downcast from List_node_base to _List_node to get to value.
              .           .           .                        .                      .                      .                       .            .            .                 reference
              .           .           .                        .                      .                      .                       .            .            .                 operator*() const _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 pointer
              .           .           .                        .                      .                      .                       .            .            .                 operator->() const _GLIBCXX_NOEXCEPT
-- line 299 ----------------------------------------
-- line 325 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 operator--(int) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	_Self __tmp = *this;
              .           .           .                        .                      .                      .                       .            .            .           	_M_node = _M_node->_M_prev;
              .           .           .                        .                      .                      .                       .            .            .           	return __tmp;
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 friend bool
  3,264,394,776 ( 0.12%)  0           0                        0                      0                      0           2,448,296,082 ( 0.34%)   0            0                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  6,528,789,552 ( 0.25%) 80 ( 0.47%) 53 ( 0.43%)   4,896,592,164 ( 0.52%)             0                      0                       0            0            0                 { return __x._M_node == __y._M_node; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cpp_impl_three_way_comparison < 201907L
              .           .           .                        .                      .                      .                       .            .            .                 friend bool
              .           .           .                        .                      .                      .                       .            .            .                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return __x._M_node != __y._M_node; }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // The only member points to the %list element.
-- line 342 ----------------------------------------
-- line 366 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           	  {
              .           .           .                        .                      .                      .                       .            .            .           	    __first = __first->_M_next;
              .           .           .                        .                      .                      .                       .            .            .           	    ++__n;
              .           .           .                        .                      .                      .                       .            .            .           	  }
              .           .           .                        .                      .                      .                       .            .            .           	return __n;
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
         52,800 ( 0.00%)  0           0                   15,840 ( 0.00%)             0                      0                  15,840 ( 0.00%)   0            0                 struct _List_impl
              .           .           .                        .                      .                      .                       .            .            .                 : public _Node_alloc_type
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	__detail::_List_node_header _M_node;
              .           .           .                        .                      .                      .                       .            .            .           
         21,120 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0                  10,560 ( 0.00%)  80 ( 0.00%)  52 ( 0.00%)  	_List_impl() _GLIBCXX_NOEXCEPT_IF(
              .           .           .                        .                      .                      .                       .            .            .           	    is_nothrow_default_constructible<_Node_alloc_type>::value)
         31,680 ( 0.00%)  0           0                   10,560 ( 0.00%)             0                      0                  10,560 ( 0.00%)   0            0           	: _Node_alloc_type()
         15,840 ( 0.00%)  0           0                   10,560 ( 0.00%)             0                      0                       0            0            0           	{ }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           	_List_impl(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .           	: _Node_alloc_type(__a)
              .           .           .                        .                      .                      .                       .            .            .           	{ }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .           	_List_impl(_List_impl&&) = default;
              .           .           .                        .                      .                      .                       .            .            .           
-- line 390 ----------------------------------------
-- line 396 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           	: _Node_alloc_type(std::move(__a))
              .           .           .                        .                      .                      .                       .            .            .           	{ }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .                 };
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _List_impl _M_impl;
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if _GLIBCXX_USE_CXX11_ABI
 17,138,073,498 ( 0.65%) 80 ( 0.47%) 53 ( 0.43%)   9,793,184,856 ( 1.04%)     1,131,475 ( 0.01%)         7,432 ( 0.00%)  4,896,592,428 ( 0.67%)   0            0                 size_t _M_get_size() const { return _M_impl._M_node._M_size; }
              .           .           .                        .                      .                      .                       .            .            .           
 20,402,461,090 ( 0.77%)  2 ( 0.01%)  1 ( 0.01%)   8,160,984,436 ( 0.87%)             0                      0           8,160,984,436 ( 1.12%)   0            0                 void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }
              .           .           .                        .                      .                      .                       .            .            .           
 15,913,934,387 ( 0.60%)  1 ( 0.01%)  1 ( 0.01%)   7,344,892,794 ( 0.78%)     1,012,633 ( 0.01%)         3,700 ( 0.00%)  4,896,595,196 ( 0.67%)   0            0                 void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
              .           .           .                        .                      .                      .                       .            .            .           
  5,304,641,511 ( 0.20%) 80 ( 0.47%) 53 ( 0.43%)   2,448,296,082 ( 0.26%)       919,751 ( 0.01%)         3,318 ( 0.00%)  1,632,197,388 ( 0.22%)   0            0                 void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           # if !_GLIBCXX_INLINE_VERSION
              .           .           .                        .                      .                      .                       .            .            .                 size_t
              .           .           .                        .                      .                      .                       .            .            .                 _M_distance(const __detail::_List_node_base* __first,
              .           .           .                        .                      .                      .                       .            .            .           		  const __detail::_List_node_base* __last) const
              .           .           .                        .                      .                      .                       .            .            .                 { return _S_distance(__first, __last); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // return the stored size
-- line 418 ----------------------------------------
-- line 433 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	return _S_distance(_M_impl._M_node._M_next,
              .           .           .                        .                      .                      .                       .            .            .           			   std::__addressof(_M_impl._M_node));
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           # endif
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 typename _Node_alloc_traits::pointer
  1,632,197,388 ( 0.06%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0             816,098,694 ( 0.11%)   0            0                 _M_get_node()
  2,448,296,082 ( 0.09%)  0           0            1,224,148,041 ( 0.13%)             0                      0             408,049,347 ( 0.06%)   0            0                 { return _Node_alloc_traits::allocate(_M_impl, 1); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
  2,040,246,735 ( 0.08%)  0           0                        0                      0                      0           1,224,148,041 ( 0.17%)   0            0                 _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
  3,672,444,123 ( 0.14%)  0           0            1,632,197,388 ( 0.17%)             0                      0             408,049,347 ( 0.06%)   0            0                 { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .             public:
              .           .           .                        .                      .                      .                       .            .            .                 typedef _Alloc allocator_type;
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _Node_alloc_type&
 12,241,480,806 ( 0.46%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0           8,160,987,204 ( 1.12%)   0            0                 _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 12,241,480,806 ( 0.46%)  0           0           12,241,480,806 ( 1.31%)             0                      0                       0            0            0                 { return _M_impl; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 const _Node_alloc_type&
              .           .           .                        .                      .                      .                       .            .            .                 _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return _M_impl; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
         52,800 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)          15,840 ( 0.00%)             0                      0                  15,840 ( 0.00%)   0            0                 _List_base() = default;
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 _List_base() { }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 _List_base(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 : _M_impl(__a)
              .           .           .                        .                      .                      .                       .            .            .                 { }
              .           .           .                        .                      .                      .                       .            .            .           
-- line 468 ----------------------------------------
-- line 490 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 { }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_move_nodes(_List_base&& __x)
              .           .           .                        .                      .                      .                       .            .            .                 { _M_impl._M_node._M_move_nodes(std::move(__x._M_impl._M_node)); }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // This is what actually destroys the list.
         21,120 ( 0.00%)  0           0                        0                      0                      0                  10,560 ( 0.00%)   0            0                 ~_List_base() _GLIBCXX_NOEXCEPT
         47,520 ( 0.00%)  0           0                   21,120 ( 0.00%)            80 ( 0.00%)            52 ( 0.00%)         10,560 ( 0.00%)   0            0                 { _M_clear(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_clear() _GLIBCXX_NOEXCEPT;
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_init() _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { this->_M_impl._M_node._M_init(); }
              .           .           .                        .                      .                      .                       .            .            .               };
-- line 507 ----------------------------------------
-- line 624 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           	    _M_put_node(__p);
              .           .           .                        .                      .                      .                       .            .            .           	    __throw_exception_again;
              .           .           .                        .                      .                      .                       .            .            .           	  }
              .           .           .                        .                      .                      .                       .            .            .           	return __p;
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 template<typename... _Args>
              .           .           .                        .                      .                      .                       .            .            .           	_Node*
  3,672,444,123 ( 0.14%)  1 ( 0.01%)  1 ( 0.01%)     408,049,347 ( 0.04%)             0                      0           2,040,246,735 ( 0.28%)   0            0           	_M_create_node(_Args&&... __args)
              .           .           .                        .                      .                      .                       .            .            .           	{
  1,632,197,388 ( 0.06%)  0           0              408,049,347 ( 0.04%)             0                      0             816,098,694 ( 0.11%)   0            0           	  auto __p = this->_M_get_node();
  1,632,197,388 ( 0.06%)  0           0              408,049,347 ( 0.04%)             0                      0             816,098,694 ( 0.11%)   0            0           	  auto& __alloc = _M_get_Node_allocator();
  2,448,296,082 ( 0.09%)  1 ( 0.01%)  1 ( 0.01%)     816,098,694 ( 0.09%)             0                      0             408,049,347 ( 0.06%)   0            0           	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
  5,304,641,511 ( 0.20%)  0           0            1,224,148,041 ( 0.13%)             0                      0           1,224,148,041 ( 0.17%)   0            0           	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
              .           .           .                        .                      .                      .                       .            .            .           					std::forward<_Args>(__args)...);
  1,632,197,388 ( 0.06%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0             408,049,347 ( 0.06%)   0            0           	  __guard = nullptr;
    816,098,694 ( 0.03%)  0           0              408,049,347 ( 0.04%)             0                      0                       0            0            0           	  return __p;
  3,672,444,123 ( 0.14%)  0           0            2,040,246,735 ( 0.22%)             0                      0             408,049,347 ( 0.06%)   0            0           	}
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if _GLIBCXX_USE_CXX11_ABI
              .           .           .                        .                      .                      .                       .            .            .                 static size_t
              .           .           .                        .                      .                      .                       .            .            .                 _S_distance(const_iterator __first, const_iterator __last)
              .           .           .                        .                      .                      .                       .            .            .                 { return std::distance(__first, __last); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // return the stored size
              .           .           .                        .                      .                      .                       .            .            .                 size_t
  1,632,200,420 ( 0.06%)  0           0                        0                      0                      0             816,100,210 ( 0.11%)   0            0                 _M_node_count() const
  2,040,250,525 ( 0.08%)  0           0            1,224,150,315 ( 0.13%)             0                      0             408,050,105 ( 0.06%)   0            0                 { return this->_M_get_size(); }
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 // dummy implementations used when the size is not stored
              .           .           .                        .                      .                      .                       .            .            .                 static size_t
              .           .           .                        .                      .                      .                       .            .            .                 _S_distance(const_iterator, const_iterator)
              .           .           .                        .                      .                      .                       .            .            .                 { return 0; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // count the number of nodes
              .           .           .                        .                      .                      .                       .            .            .                 size_t
-- line 660 ----------------------------------------
-- line 665 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .               public:
              .           .           .                        .                      .                      .                       .            .            .                 // [23.2.2.1] construct/copy/destroy
              .           .           .                        .                      .                      .                       .            .            .                 // (assign() and get_allocator() are also listed in this section)
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Creates a %list with no elements.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
         52,800 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)          15,840 ( 0.00%)             0                      0                  15,840 ( 0.00%)  80 ( 0.00%)  52 ( 0.00%)        list() = default;
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 list() { }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Creates a %list with no elements.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __a  An allocator object.
              .           .           .                        .                      .                      .                       .            .            .                  */
-- line 681 ----------------------------------------
-- line 819 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  No explicit dtor needed as the _Base dtor takes care of
              .           .           .                        .                      .                      .                       .            .            .                  *  things.  The _Base dtor only erases the elements, and note
              .           .           .                        .                      .                      .                       .            .            .                  *  that if the elements themselves are pointers, the pointed-to
              .           .           .                        .                      .                      .                       .            .            .                  *  memory is not touched in any way.  Managing the pointer is
              .           .           .                        .                      .                      .                       .            .            .                  *  the user's responsibility.
              .           .           .                        .                      .                      .                       .            .            .                  */
         52,800 ( 0.00%)  0           0                   15,840 ( 0.00%)             0                      0                  15,840 ( 0.00%)   0            0                 ~list() = default;
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  %List assignment operator.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __x  A %list of identical element and allocator types.
              .           .           .                        .                      .                      .                       .            .            .                  *
              .           .           .                        .                      .                      .                       .            .            .                  *  All the elements of @a __x are copied.
              .           .           .                        .                      .                      .                       .            .            .                  *
-- line 835 ----------------------------------------
-- line 937 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 { return allocator_type(_Base::_M_get_Node_allocator()); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // iterators
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Returns a read/write iterator that points to the first element in the
              .           .           .                        .                      .                      .                       .            .            .                  *  %list.  Iteration is done in ordinary element order.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 iterator
 11,425,433,719 ( 0.43%)  1 ( 0.01%)  1 ( 0.01%)   1,632,204,817 ( 0.17%)             0                      0           4,896,614,451 ( 0.67%)   0            0                 begin() _GLIBCXX_NOEXCEPT
 19,586,457,804 ( 0.74%)  0           0           11,425,433,719 ( 1.22%)         5,830 ( 0.00%)           542 ( 0.00%)  1,632,204,817 ( 0.22%)   0            0                 { return iterator(this->_M_impl._M_node._M_next); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Returns a read-only (constant) iterator that points to the
              .           .           .                        .                      .                      .                       .            .            .                  *  first element in the %list.  Iteration is done in ordinary
              .           .           .                        .                      .                      .                       .            .            .                  *  element order.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 const_iterator
              .           .           .                        .                      .                      .                       .            .            .                 begin() const _GLIBCXX_NOEXCEPT
-- line 954 ----------------------------------------
-- line 955 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 { return const_iterator(this->_M_impl._M_node._M_next); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Returns a read/write iterator that points one past the last
              .           .           .                        .                      .                      .                       .            .            .                  *  element in the %list.  Iteration is done in ordinary element
              .           .           .                        .                      .                      .                       .            .            .                  *  order.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 iterator
  8,569,088,290 ( 0.32%)  2 ( 0.01%)  1 ( 0.01%)   1,224,155,470 ( 0.13%)             0                      0           3,672,466,410 ( 0.50%)  79 ( 0.00%)  52 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
 13,465,710,170 ( 0.51%)  2 ( 0.01%)  1 ( 0.01%)   7,344,932,820 ( 0.78%)             0                      0           1,224,155,470 ( 0.17%)   0            0                 { return iterator(&this->_M_impl._M_node); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Returns a read-only (constant) iterator that points one past
              .           .           .                        .                      .                      .                       .            .            .                  *  the last element in the %list.  Iteration is done in ordinary
              .           .           .                        .                      .                      .                       .            .            .                  *  element order.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 const_iterator
              .           .           .                        .                      .                      .                       .            .            .                 end() const _GLIBCXX_NOEXCEPT
-- line 972 ----------------------------------------
-- line 1047 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // [23.2.2.2] capacity
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Returns true if the %list is empty.  (Thus begin() would equal
              .           .           .                        .                      .                      .                       .            .            .                  *  end().)
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 _GLIBCXX_NODISCARD bool
  3,672,436,977 ( 0.14%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0           2,448,291,318 ( 0.34%)   0            0                 empty() const _GLIBCXX_NOEXCEPT
  8,569,019,613 ( 0.32%)  0           0            6,120,728,295 ( 0.65%)     2,277,698 ( 0.01%)        10,919 ( 0.00%)              0            0            0                 { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**  Returns the number of elements in the %list.  */
              .           .           .                        .                      .                      .                       .            .            .                 size_type
  1,632,200,420 ( 0.06%)  0           0                        0                      0                      0             816,100,210 ( 0.11%)   0            0                 size() const _GLIBCXX_NOEXCEPT
  2,040,250,525 ( 0.08%)  0           0            1,224,150,315 ( 0.13%)             0                      0             408,050,105 ( 0.06%)   0            0                 { return _M_node_count(); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**  Returns the size() of the largest possible %list.  */
              .           .           .                        .                      .                      .                       .            .            .                 size_type
              .           .           .                        .                      .                      .                       .            .            .                 max_size() const _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 /**
-- line 1069 ----------------------------------------
-- line 1208 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                  *  references.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 push_back(const value_type& __x)
              .           .           .                        .                      .                      .                       .            .            .                 { this->_M_insert(end(), __x); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 void
  2,448,296,082 ( 0.09%)  0           0                        0                      0                      0           1,632,197,388 ( 0.22%)   0            0                 push_back(value_type&& __x)
  6,936,838,899 ( 0.26%) 80 ( 0.47%) 53 ( 0.43%)   2,448,296,082 ( 0.26%)             0                      0           1,224,148,041 ( 0.17%)   0            0                 { this->_M_insert(end(), std::move(__x)); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 template<typename... _Args>
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus > 201402L
              .           .           .                        .                      .                      .                       .            .            .           	reference
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .           	void
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           	emplace_back(_Args&&... __args)
-- line 1225 ----------------------------------------
-- line 1470 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                  *  This exchanges the elements between two lists in constant
              .           .           .                        .                      .                      .                       .            .            .                  *  time.  Note that the global std::swap() function is
              .           .           .                        .                      .                      .                       .            .            .                  *  specialized such that std::swap(l1,l2) will feed to this
              .           .           .                        .                      .                      .                       .            .            .                  *  function.
              .           .           .                        .                      .                      .                       .            .            .                  *
              .           .           .                        .                      .                      .                       .            .            .                  *  Whether the allocators are swapped depends on the allocator traits.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
  4,896,588,012 ( 0.18%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0           3,264,392,008 ( 0.45%)   0            0                 swap(list& __x) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
  4,080,490,010 ( 0.15%)  0           0            1,632,196,004 ( 0.17%)             0                      0             816,098,002 ( 0.11%)   0            0           	__detail::_List_node_base::swap(this->_M_impl._M_node,
              .           .           .                        .                      .                      .                       .            .            .           					__x._M_impl._M_node);
              .           .           .                        .                      .                      .                       .            .            .           
  3,264,392,008 ( 0.12%)  0           0              816,098,002 ( 0.09%)             0                      0           1,632,196,004 ( 0.22%)   0            0           	size_t __xsize = __x._M_get_size();
  5,712,686,014 ( 0.22%) 80 ( 0.47%) 53 ( 0.43%)   1,632,196,004 ( 0.17%)             0                      0           1,632,196,004 ( 0.22%)   0            0           	__x._M_set_size(this->_M_get_size());
  4,080,490,010 ( 0.15%)  0           0            1,632,196,004 ( 0.17%)             0                      0             816,098,002 ( 0.11%)   0            0           	this->_M_set_size(__xsize);
              .           .           .                        .                      .                      .                       .            .            .           
  4,896,588,012 ( 0.18%)  1 ( 0.01%)  1 ( 0.01%)     816,098,002 ( 0.09%)             0                      0           1,632,196,004 ( 0.22%)   0            0           	_Node_alloc_traits::_S_on_swap(this->_M_get_Node_allocator(),
  3,264,392,008 ( 0.12%)  0           0              816,098,002 ( 0.09%)             0                      0             816,098,002 ( 0.11%)   0            0           				       __x._M_get_Node_allocator());
  3,264,392,008 ( 0.12%)  0           0            2,448,294,006 ( 0.26%)             0                      0                       0            0            0                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  Erases all the elements.  Note that this function only erases
              .           .           .                        .                      .                      .                       .            .            .                  *  the elements, and that if the elements themselves are
              .           .           .                        .                      .                      .                       .            .            .                  *  pointers, the pointed-to memory is not touched in any way.
              .           .           .                        .                      .                      .                       .            .            .                  *  Managing the pointer is the user's responsibility.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
-- line 1497 ----------------------------------------
-- line 1545 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                  *                      insert before.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __x  Source list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __i  Const_iterator referencing the element to move.
              .           .           .                        .                      .                      .                       .            .            .                  *
              .           .           .                        .                      .                      .                       .            .            .                  *  Removes the element in list @a __x referenced by @a __i and
              .           .           .                        .                      .                      .                       .            .            .                  *  inserts it into the current list before @a __position.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
  4,488,542,817 ( 0.17%)  1 ( 0.01%)  1 ( 0.01%)     408,049,347 ( 0.04%)             0                      0           2,856,345,429 ( 0.39%)   0            0                 splice(const_iterator __position, list&& __x, const_iterator __i) noexcept
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Insert element from another %list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __position  Iterator referencing the element to insert before.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __x  Source list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __i  Iterator referencing the element to move.
              .           .           .                        .                      .                      .                       .            .            .                  *
              .           .           .                        .                      .                      .                       .            .            .                  *  Removes the element in list @a __x referenced by @a __i and
              .           .           .                        .                      .                      .                       .            .            .                  *  inserts it into the current list before @a __position.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 splice(iterator __position, list& __x, iterator __i)
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .                 {
  1,632,197,388 ( 0.06%)  0           0                        0                      0                      0             816,098,694 ( 0.11%)   0            0           	iterator __j = __i._M_const_cast();
  1,224,148,041 ( 0.05%)  0           0                        0                      0                      0             408,049,347 ( 0.06%)   0            0           	++__j;
  8,977,085,634 ( 0.34%)  1 ( 0.01%)  1 ( 0.01%)               0                      0                      0           1,224,148,041 ( 0.17%)   0            0           	if (__position == __i || __position == __j)
              .           .           .                        .                      .                      .                       .            .            .           	  return;
              .           .           .                        .                      .                      .                       .            .            .           
  2,856,345,429 ( 0.11%)  1 ( 0.01%)  1 ( 0.01%)     816,098,694 ( 0.09%)             0                      0             408,049,347 ( 0.06%)   0            0           	if (this != std::__addressof(__x))
  2,040,246,735 ( 0.08%)  0           0              816,098,694 ( 0.09%)             0                      0             408,049,347 ( 0.06%)   0            0           	  _M_check_equal_allocators(__x);
              .           .           .                        .                      .                      .                       .            .            .           
  5,712,690,858 ( 0.22%)  1 ( 0.01%)  1 ( 0.01%)     816,098,694 ( 0.09%)             0                      0           1,224,148,041 ( 0.17%)   0            0           	this->_M_transfer(__position._M_const_cast(),
              .           .           .                        .                      .                      .                       .            .            .           			  __i._M_const_cast(), __j);
              .           .           .                        .                      .                      .                       .            .            .           
  1,632,197,388 ( 0.06%)  0           0              408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)   0            0           	this->_M_inc_size(1);
  2,040,246,735 ( 0.08%) 80 ( 0.47%) 53 ( 0.43%)     408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)   0            0           	__x._M_dec_size(1);
  2,448,296,082 ( 0.09%)  0           0            2,040,246,735 ( 0.22%)             0                      0                       0            0            0                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Insert element from another %list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __position  Const_iterator referencing the element to
              .           .           .                        .                      .                      .                       .            .            .                  *                      insert before.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __x  Source list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __i  Const_iterator referencing the element to move.
              .           .           .                        .                      .                      .                       .            .            .                  *
              .           .           .                        .                      .                      .                       .            .            .                  *  Removes the element in list @a __x referenced by @a __i and
              .           .           .                        .                      .                      .                       .            .            .                  *  inserts it into the current list before @a __position.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .                 void
  2,856,345,429 ( 0.11%)  2 ( 0.01%)  1 ( 0.01%)               0                      0                      0           2,040,246,735 ( 0.28%)   0            0                 splice(const_iterator __position, list& __x, const_iterator __i) noexcept
  5,712,690,858 ( 0.22%)  0           0            2,448,296,082 ( 0.26%)             0                      0             816,098,694 ( 0.11%)   0            0                 { splice(__position, std::move(__x), __i); }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Insert range from another %list.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __position  Const_iterator referencing the element to
              .           .           .                        .                      .                      .                       .            .            .                  *                      insert before.
              .           .           .                        .                      .                      .                       .            .            .                  *  @param  __x  Source list.
-- line 1604 ----------------------------------------
-- line 1749 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                  *  sorted order, leaving @a __x empty when complete.  Elements in
              .           .           .                        .                      .                      .                       .            .            .                  *  this list precede elements in @a __x that are equal.
              .           .           .                        .                      .                      .                       .            .            .                  */
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 merge(list&& __x);
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 void
  2,040,250,525 ( 0.08%)  0           0                        0                      0                      0           1,224,150,315 ( 0.17%)   0            0                 merge(list& __x)
  4,488,551,155 ( 0.17%)  0           0            1,632,200,420 ( 0.17%)     1,828,789 ( 0.01%)         6,510 ( 0.00%)    816,100,210 ( 0.11%)   0            0                 { merge(std::move(__x)); }
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 merge(list& __x);
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 /**
              .           .           .                        .                      .                      .                       .            .            .                  *  @brief  Merge sorted lists according to comparison function.
              .           .           .                        .                      .                      .                       .            .            .                  *  @tparam _StrictWeakOrdering Comparison function defining
-- line 1766 ----------------------------------------
-- line 1886 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .                 // Called by assign(n,t), and the range assign when it turns out
              .           .           .                        .                      .                      .                       .            .            .                 // to be the same thing.
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_fill_assign(size_type __n, const value_type& __val);
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Moves the elements from [first,last) before position.
              .           .           .                        .                      .                      .                       .            .            .                 void
 36,055,475,183 ( 1.36%)  2 ( 0.01%)  1 ( 0.01%)               0                      0                      0          25,753,910,845 ( 3.54%)   0            0                 _M_transfer(iterator __position, iterator __first, iterator __last)
 46,357,039,521 ( 1.75%)  0           0           25,753,910,845 ( 2.75%)             0                      0           5,150,782,169 ( 0.71%)   0            0                 { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Inserts new element at position given and with value given.
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus < 201103L
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_insert(iterator __position, const value_type& __x)
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	_Node* __tmp = _M_create_node(__x);
              .           .           .                        .                      .                      .                       .            .            .           	__tmp->_M_hook(__position._M_node);
              .           .           .                        .                      .                      .                       .            .            .           	this->_M_inc_size(1);
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           #else
              .           .           .                        .                      .                      .                       .            .            .                template<typename... _Args>
              .           .           .                        .                      .                      .                       .            .            .                  void
  2,448,296,082 ( 0.09%) 80 ( 0.47%) 52 ( 0.42%)               0                      0                      0           1,632,197,388 ( 0.22%)   0            0                  _M_insert(iterator __position, _Args&&... __args)
              .           .           .                        .                      .                      .                       .            .            .                  {
  3,672,444,123 ( 0.14%)  0           0              816,098,694 ( 0.09%)             0                      0           1,224,148,041 ( 0.17%)   0            0           	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  2,040,246,735 ( 0.08%)  1 ( 0.01%)  1 ( 0.01%)     816,098,694 ( 0.09%)             0                      0             408,049,347 ( 0.06%)   0            0           	 __tmp->_M_hook(__position._M_node);
  1,632,197,388 ( 0.06%)  0           0              408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)   0            0           	 this->_M_inc_size(1);
  1,224,148,041 ( 0.05%)  0           0              816,098,694 ( 0.09%)             0                      0                       0            0            0                  }
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Erases element at position given.
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
              .           .           .                        .                      .                      .                       .            .            .           	this->_M_dec_size(1);
              .           .           .                        .                      .                      .                       .            .            .           	__position._M_node->_M_unhook();
-- line 1922 ----------------------------------------
-- line 1927 ----------------------------------------
              .           .           .                        .                      .                      .                       .            .            .           	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
              .           .           .                        .                      .                      .                       .            .            .           #endif
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           	_M_put_node(__n);
              .           .           .                        .                      .                      .                       .            .            .                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // To implement the splice (and merge) bits of N1599.
              .           .           .                        .                      .                      .                       .            .            .                 void
  4,896,596,712 ( 0.18%)  0           0                        0                      0                      0           3,264,397,808 ( 0.45%)   0            0                 _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT
              .           .           .                        .                      .                      .                       .            .            .                 {
  1,632,198,904 ( 0.06%)  0           0                        0                      0                      0                       0            0            0           	if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
  8,160,994,520 ( 0.31%) 79 ( 0.47%) 53 ( 0.43%)   1,632,198,904 ( 0.17%)             0                      0           2,448,298,356 ( 0.34%)   0            0           	    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
              .           .           .                        .                      .                      .                       .            .            .           	  __builtin_abort();
  3,264,397,808 ( 0.12%)  0           0            2,448,298,356 ( 0.26%)             0                      0                       0            0            0                 }
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .                 // Used to implement resize.
              .           .           .                        .                      .                      .                       .            .            .                 const_iterator
              .           .           .                        .                      .                      .                       .            .            .                 _M_resize_pos(size_type& __new_size) const;
              .           .           .                        .                      .                      .                       .            .            .           
              .           .           .                        .                      .                      .                       .            .            .           #if __cplusplus >= 201103L
              .           .           .                        .                      .                      .                       .            .            .                 void
              .           .           .                        .                      .                      .                       .            .            .                 _M_move_assign(list&& __x, true_type) noexcept
-- line 1948 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/random.tcc
--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr                DLmr        Dw                   D1mw           DLmw           

-- line 315 ----------------------------------------
            .           .           .                      .                   .           .                    .              .              .           			    __s, __b, __t, __c, __l, __f>::default_seed;
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __w, size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f>
            .           .           .                      .                   .           .                    .              .              .               void
          400 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)             0                   0           0                  240 ( 0.00%)     0              0               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
            .           .           .                      .                   .           .                    .              .              .           			    __s, __b, __t, __c, __l, __f>::
            .           .           .                      .                   .           .                    .              .              .               seed(result_type __sd)
            .           .           .                      .                   .           .                    .              .              .               {
          160 ( 0.00%)  0           0                     80 ( 0.00%)          0           0                   80 ( 0.00%)    80 ( 0.00%)    51 ( 0.00%)        _M_x[0] = __detail::__mod<_UIntType,
          240 ( 0.00%)  0           0                     80 ( 0.00%)          0           0                   80 ( 0.00%)     0              0           	__detail::_Shift<_UIntType, __w>::__value>(__sd);
            .           .           .                      .                   .           .                    .              .              .           
      149,840 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)        99,760 ( 0.00%)          0           0                   80 ( 0.00%)     0              0                 for (size_t __i = 1; __i < state_size; ++__i)
            .           .           .                      .                   .           .                    .              .              .           	{
      249,200 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)       149,520 ( 0.00%)          0           0               49,840 ( 0.00%)     0              0           	  _UIntType __x = _M_x[__i - 1];
      149,520 ( 0.00%)  0           0                 99,680 ( 0.00%)          0           0                    0              0              0           	  __x ^= __x >> (__w - 2);
      149,520 ( 0.00%)  0           0                 49,840 ( 0.00%)          0           0               49,840 ( 0.00%)     0              0           	  __x *= __f;
      199,360 ( 0.00%)  0           0                 99,680 ( 0.00%)          0           0               49,840 ( 0.00%)     0              0           	  __x += __detail::__mod<_UIntType, __n>(__i);
      149,520 ( 0.00%)  0           0                 99,680 ( 0.00%)          0           0               49,840 ( 0.00%) 6,214 ( 0.00%) 3,984 ( 0.00%)  	  _M_x[__i] = __detail::__mod<_UIntType,
      149,520 ( 0.00%)  0           0                 49,840 ( 0.00%)          0           0               49,840 ( 0.00%)     0              0           	    __detail::_Shift<_UIntType, __w>::__value>(__x);
            .           .           .                      .                   .           .                    .              .              .           	}
          160 ( 0.00%)  0           0                     80 ( 0.00%)          0           0                   80 ( 0.00%)     0              0                 _M_p = state_size;
          240 ( 0.00%)  0           0                    160 ( 0.00%)          0           0                    0              0              0               }
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __w, size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f>
            .           .           .                      .                   .           .                    .              .              .               template<typename _Sseq>
            .           .           .                      .                   .           .                    .              .              .                 auto
-- line 348 ----------------------------------------
-- line 386 ----------------------------------------
            .           .           .                      .                   .           .                    .              .              .                 }
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType, size_t __w,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f>
            .           .           .                      .                   .           .                    .              .              .               void
    1,966,047 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)             0                   0           0            1,310,698 ( 0.00%)     0              0               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
            .           .           .                      .                   .           .                    .              .              .           			    __s, __b, __t, __c, __l, __f>::
            .           .           .                      .                   .           .                    .              .              .               _M_gen_rand(void)
            .           .           .                      .                   .           .                    .              .              .               {
      655,349 ( 0.00%)  0           0                      0                   0           0              655,349 ( 0.00%)     0              0                 const _UIntType __upper_mask = (~_UIntType()) << __r;
      655,349 ( 0.00%)  0           0                      0                   0           0              655,349 ( 0.00%)     0              0                 const _UIntType __lower_mask = ~__upper_mask;
            .           .           .                      .                   .           .                    .              .              .           
  448,914,065 ( 0.02%)  2 ( 0.01%)  1 ( 0.01%)   298,183,795 ( 0.03%)          0           0              655,349 ( 0.00%)     0              0                 for (size_t __k = 0; __k < (__n - __m); ++__k)
            .           .           .                      .                   .           .                    .              .              .                   {
1,041,349,561 ( 0.04%)  2 ( 0.01%)  1 ( 0.01%)   446,292,669 ( 0.05%)          0           0          148,764,223 ( 0.02%)     0              0           	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  743,821,115 ( 0.03%)  0           0            446,292,669 ( 0.05%) 14,978,464 ( 0.08%) 26 ( 0.00%)           0              0              0           			   | (_M_x[__k + 1] & __lower_mask));
1,487,642,230 ( 0.06%)  0           0            892,585,338 ( 0.10%)    918,702 ( 0.01%)  0          148,764,223 ( 0.02%)     0              0           	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
1,115,753,862 ( 0.04%)  0           0            148,764,223 ( 0.02%)          0           0                    0              0              0           		       ^ ((__y & 0x01) ? __a : 0));
            .           .           .                      .                   .           .                    .              .              .                   }
            .           .           .                      .                   .           .                    .              .              .           
  781,176,008 ( 0.03%) 82 ( 0.48%) 53 ( 0.43%)   519,691,757 ( 0.06%)          0           0              655,349 ( 0.00%)     0              0                 for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
            .           .           .                      .                   .           .                    .              .              .           	{
1,816,627,428 ( 0.07%)  0           0            778,554,612 ( 0.08%)          0           0          259,518,204 ( 0.04%)     0              0           	  _UIntType __y = ((_M_x[__k] & __upper_mask)
1,297,591,020 ( 0.05%)  0           0            778,554,612 ( 0.08%)  5,439,690 ( 0.03%)  0                    0              0              0           			   | (_M_x[__k + 1] & __lower_mask));
2,595,182,040 ( 0.10%)  0           0          1,557,109,224 ( 0.17%)          0           0          259,518,204 ( 0.04%)     0              0           	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
1,946,380,298 ( 0.07%)  0           0            259,518,204 ( 0.03%)          0           0                    0              0              0           		       ^ ((__y & 0x01) ? __a : 0));
            .           .           .                      .                   .           .                    .              .              .           	}
            .           .           .                      .                   .           .                    .              .              .           
    3,932,094 ( 0.00%)  0           0              1,310,698 ( 0.00%)          0           0              655,349 ( 0.00%)     0              0                 _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
    1,966,047 ( 0.00%)  0           0              1,310,698 ( 0.00%)          0           0                    0              0              0           		       | (_M_x[0] & __lower_mask));
    4,587,443 ( 0.00%)  2 ( 0.01%)  1 ( 0.01%)     2,621,396 ( 0.00%)          0           0              655,349 ( 0.00%)     0              0                 _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    4,260,781 ( 0.00%)  0           0                655,349 ( 0.00%)          0           0                    0              0              0           		       ^ ((__y & 0x01) ? __a : 0));
    1,310,698 ( 0.00%)  0           0                655,349 ( 0.00%)          0           0              655,349 ( 0.00%)     0              0                 _M_p = 0;
    1,966,047 ( 0.00%)  0           0              1,310,698 ( 0.00%)          0           0                    0              0              0               }
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType, size_t __w,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f>
            .           .           .                      .                   .           .                    .              .              .               void
            .           .           .                      .                   .           .                    .              .              .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
-- line 430 ----------------------------------------
-- line 442 ----------------------------------------
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType, size_t __w,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f>
            .           .           .                      .                   .           .                    .              .              .               typename
            .           .           .                      .                   .           .                    .              .              .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
            .           .           .                      .                   .           .                    .              .              .           			    __s, __b, __t, __c, __l, __f>::result_type
1,635,667,312 ( 0.06%) 80 ( 0.47%) 52 ( 0.42%)             0                   0           0          817,833,656 ( 0.11%)     0              0               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
            .           .           .                      .                   .           .                    .              .              .           			    __s, __b, __t, __c, __l, __f>::
            .           .           .                      .                   .           .                    .              .              .               operator()()
            .           .           .                      .                   .           .                    .              .              .               {
            .           .           .                      .                   .           .                    .              .              .                 // Reload the vector - cost is O(n) amortized over n calls.
1,635,667,312 ( 0.06%)  0           0            817,833,656 ( 0.09%)          0           0                    0              0              0                 if (_M_p >= state_size)
    1,966,047 ( 0.00%) 80 ( 0.47%) 52 ( 0.42%)       655,349 ( 0.00%)          0           0              655,349 ( 0.00%)     0              0           	_M_gen_rand();
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .                 // Calculate o(x(i)).
3,271,334,624 ( 0.12%)  0           0          2,044,584,140 ( 0.22%) 21,712,711 ( 0.12%)  0          817,833,656 ( 0.11%)     0              0                 result_type __z = _M_x[_M_p++];
1,635,667,312 ( 0.06%)  0           0            817,833,656 ( 0.09%)          0           0                    0              0              0                 __z ^= (__z >> __u) & __d;
1,635,667,312 ( 0.06%)  1 ( 0.01%)  1 ( 0.01%)   817,833,656 ( 0.09%)          0           0                    0              0              0                 __z ^= (__z << __s) & __b;
1,635,667,312 ( 0.06%)  0           0            817,833,656 ( 0.09%)          0           0                    0              0              0                 __z ^= (__z << __t) & __c;
1,226,750,484 ( 0.05%)  0           0            817,833,656 ( 0.09%)          0           0                    0              0              0                 __z ^= (__z >> __l);
            .           .           .                      .                   .           .                    .              .              .           
  408,916,828 ( 0.02%)  0           0            408,916,828 ( 0.04%)          0           0                    0              0              0                 return __z;
  817,833,656 ( 0.03%)  0           0            817,833,656 ( 0.09%)          0           0                    0              0              0               }
            .           .           .                      .                   .           .                    .              .              .           
            .           .           .                      .                   .           .                    .              .              .             template<typename _UIntType, size_t __w,
            .           .           .                      .                   .           .                    .              .              .           	   size_t __n, size_t __m, size_t __r,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
            .           .           .                      .                   .           .                    .              .              .           	   _UIntType __f, typename _CharT, typename _Traits>
            .           .           .                      .                   .           .                    .              .              .               std::basic_ostream<_CharT, _Traits>&
            .           .           .                      .                   .           .                    .              .              .               operator<<(std::basic_ostream<_CharT, _Traits>& __os,
-- line 474 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw                 DLmw                 

-- line 71 ----------------------------------------
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .                    .                    .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                    .                    .                 // 2103. propagate_on_container_move_assignment
            .          .          .                      .          .          .                      .                    .                    .                 typedef std::true_type propagate_on_container_move_assignment;
            .          .          .                      .          .          .                      .                    .                    .           #endif
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 _GLIBCXX20_CONSTEXPR
       31,680 ( 0.00%) 0          0                 10,560 ( 0.00%) 0          0                 10,560 ( 0.00%)          80 ( 0.00%)          52 ( 0.00%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 _GLIBCXX20_CONSTEXPR
            .          .          .                      .          .          .                      .                    .                    .                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 template<typename _Tp1>
            .          .          .                      .          .          .                      .                    .                    .           	_GLIBCXX20_CONSTEXPR
            .          .          .                      .          .          .                      .                    .                    .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #if __cplusplus <= 201703L
       31,680 ( 0.00%) 0          0                 10,560 ( 0.00%) 0          0                 10,560 ( 0.00%)           0                    0                 ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 pointer
            .          .          .                      .          .          .                      .                    .                    .                 address(reference __x) const _GLIBCXX_NOEXCEPT
            .          .          .                      .          .          .                      .                    .                    .                 { return std::__addressof(__x); }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 const_pointer
            .          .          .                      .          .          .                      .                    .                    .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
            .          .          .                      .          .          .                      .                    .                    .                 { return std::__addressof(__x); }
            .          .          .                      .          .          .                      .                    .                    .           #endif
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
            .          .          .                      .          .          .                      .                    .                    .                 // about what the return value is when __n == 0.
            .          .          .                      .          .          .                      .                    .                    .                 _GLIBCXX_NODISCARD _Tp*
2,448,296,082 ( 0.09%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,632,197,388 ( 0.22%)           0                    0                 allocate(size_type __n, const void* = static_cast<const void*>(0))
            .          .          .                      .          .          .                      .                    .                    .                 {
4,080,493,470 ( 0.15%) 0          0            816,098,694 ( 0.09%) 0          0            408,049,347 ( 0.06%)           0                    0           	if (__builtin_expect(__n > this->_M_max_size(), false))
            .          .          .                      .          .          .                      .                    .                    .           	  {
            .          .          .                      .          .          .                      .                    .                    .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                    .                    .           	    // 3190. allocator::allocate sometimes returns too little storage
            .          .          .                      .          .          .                      .                    .                    .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
            .          .          .                      .          .          .                      .                    .                    .           	      std::__throw_bad_array_new_length();
            .          .          .                      .          .          .                      .                    .                    .           	    std::__throw_bad_alloc();
            .          .          .                      .          .          .                      .                    .                    .           	  }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #if __cpp_aligned_new
            .          .          .                      .          .          .                      .                    .                    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
            .          .          .                      .          .          .                      .                    .                    .           	  {
            .          .          .                      .          .          .                      .                    .                    .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
            .          .          .                      .          .          .                      .                    .                    .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
            .          .          .                      .          .          .                      .                    .                    .           	  }
            .          .          .                      .          .          .                      .                    .                    .           #endif
3,264,394,776 ( 0.12%) 1 ( 0.01%) 1 ( 0.01%)   408,049,347 ( 0.04%) 0          0            408,049,347 ( 0.06%)           0                    0           	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  816,098,694 ( 0.03%) 0          0            816,098,694 ( 0.09%) 0          0                      0                    0                    0                 }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 // __p is not permitted to be a null pointer.
            .          .          .                      .          .          .                      .                    .                    .                 void
2,448,296,082 ( 0.09%) 0          0                      0          0          0          1,632,197,388 ( 0.22%)           0                    0                 deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
            .          .          .                      .          .          .                      .                    .                    .                 {
            .          .          .                      .          .          .                      .                    .                    .           #if __cpp_aligned_new
            .          .          .                      .          .          .                      .                    .                    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
            .          .          .                      .          .          .                      .                    .                    .           	  {
            .          .          .                      .          .          .                      .                    .                    .           	    ::operator delete(__p,
            .          .          .                      .          .          .                      .                    .                    .           # if __cpp_sized_deallocation
            .          .          .                      .          .          .                      .                    .                    .           			      __t * sizeof(_Tp),
            .          .          .                      .          .          .                      .                    .                    .           # endif
            .          .          .                      .          .          .                      .                    .                    .           			      std::align_val_t(alignof(_Tp)));
            .          .          .                      .          .          .                      .                    .                    .           	    return;
            .          .          .                      .          .          .                      .                    .                    .           	  }
            .          .          .                      .          .          .                      .                    .                    .           #endif
4,080,493,470 ( 0.15%) 0          0            816,098,694 ( 0.09%) 0          0            408,049,347 ( 0.06%)           0                    0           	::operator delete(__p
            .          .          .                      .          .          .                      .                    .                    .           #if __cpp_sized_deallocation
            .          .          .                      .          .          .                      .                    .                    .           			  , __t * sizeof(_Tp)
            .          .          .                      .          .          .                      .                    .                    .           #endif
            .          .          .                      .          .          .                      .                    .                    .           			 );
  816,098,694 ( 0.03%) 0          0            816,098,694 ( 0.09%) 0          0                      0                    0                    0                 }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #if __cplusplus <= 201703L
            .          .          .                      .          .          .                      .                    .                    .                 size_type
            .          .          .                      .          .          .                      .                    .                    .                 max_size() const _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .                    .                    .                 { return _M_max_size(); }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .                    .                    .                 template<typename _Up, typename... _Args>
            .          .          .                      .          .          .                      .                    .                    .           	void
2,856,345,429 ( 0.11%) 0          0                      0          0          0          2,040,246,735 ( 0.28%)           0                    0           	construct(_Up* __p, _Args&&... __args)
            .          .          .                      .          .          .                      .                    .                    .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
5,304,641,511 ( 0.20%) 1 ( 0.01%) 1 ( 0.01%) 2,448,296,082 ( 0.26%) 0          0          1,224,148,041 ( 0.17%) 177,594,388 (29.22%) 172,132,532 (29.32%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 template<typename _Up>
            .          .          .                      .          .          .                      .                    .                    .           	void
1,632,197,388 ( 0.06%) 0          0                      0          0          0          1,224,148,041 ( 0.17%)           0                    0           	destroy(_Up* __p)
            .          .          .                      .          .          .                      .                    .                    .           	noexcept(std::is_nothrow_destructible<_Up>::value)
1,224,148,041 ( 0.05%) 0          0            816,098,694 ( 0.09%) 0          0                      0                    0                    0           	{ __p->~_Up(); }
            .          .          .                      .          .          .                      .                    .                    .           #else
            .          .          .                      .          .          .                      .                    .                    .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                    .                    .                 // 402. wrong new expression in [some_] allocator::construct
            .          .          .                      .          .          .                      .                    .                    .                 void
            .          .          .                      .          .          .                      .                    .                    .                 construct(pointer __p, const _Tp& __val)
            .          .          .                      .          .          .                      .                    .                    .                 { ::new((void *)__p) _Tp(__val); }
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .                 void
-- line 170 ----------------------------------------
-- line 183 ----------------------------------------
            .          .          .                      .          .          .                      .                    .                    .           	friend _GLIBCXX20_CONSTEXPR bool
            .          .          .                      .          .          .                      .                    .                    .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
            .          .          .                      .          .          .                      .                    .                    .           	_GLIBCXX_NOTHROW
            .          .          .                      .          .          .                      .                    .                    .           	{ return false; }
            .          .          .                      .          .          .                      .                    .                    .           #endif
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .               private:
            .          .          .                      .          .          .                      .                    .                    .                 _GLIBCXX_CONSTEXPR size_type
1,224,148,041 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0            816,098,694 ( 0.11%)           0                    0                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .                    .                    .                 {
            .          .          .                      .          .          .                      .                    .                    .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
  408,049,347 ( 0.02%) 0          0                      0          0          0                      0                    0                    0           	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
            .          .          .                      .          .          .                      .                    .                    .           #else
            .          .          .                      .          .          .                      .                    .                    .           	return std::size_t(-1) / sizeof(_Tp);
            .          .          .                      .          .          .                      .                    .                    .           #endif
  816,098,694 ( 0.03%) 0          0            816,098,694 ( 0.09%) 0          0                      0                    0                    0                 }
            .          .          .                      .          .          .                      .                    .                    .               };
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           _GLIBCXX_END_NAMESPACE_VERSION
            .          .          .                      .          .          .                      .                    .                    .           } // namespace
            .          .          .                      .          .          .                      .                    .                    .           
            .          .          .                      .          .          .                      .                    .                    .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/new
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 167 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
            .          .          .                      .          .          .                      .          .          .           void operator delete[](void*, std::size_t, std::align_val_t)
            .          .          .                      .          .          .                      .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
            .          .          .                      .          .          .                      .          .          .           #endif // __cpp_sized_deallocation
            .          .          .                      .          .          .                      .          .          .           #endif // __cpp_aligned_new
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           // Default placement versions of operator new.
            .          .          .                      .          .          .                      .          .          .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
2,856,345,429 ( 0.11%) 1 ( 0.01%) 1 ( 0.01%) 1,224,148,041 ( 0.13%) 0          0          1,224,148,041 ( 0.17%) 0          0           { return __p; }
            .          .          .                      .          .          .                      .          .          .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .          .          .           { return __p; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           // Default placement versions of operator delete.
            .          .          .                      .          .          .                      .          .          .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .          .          .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .          .          .           //@}
            .          .          .                      .          .          .                      .          .          .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir                       I1mr       ILmr       Dr                      D1mr       DLmr       Dw                      D1mw        DLmw        

-- line 56 ----------------------------------------
              .          .          .                       .          .          .                       .           .           .                 alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 __aligned_membuf() = default;
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 // Can be used to avoid value-initialization zeroing _M_storage.
              .          .          .                       .          .          .                       .           .           .                 __aligned_membuf(std::nullptr_t) { }
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 void*
 72,537,002,223 ( 2.73%) 0          0                       0          0          0          48,358,001,482 ( 6.64%) 79 ( 0.00%) 52 ( 0.00%)        _M_addr() noexcept
 72,537,002,223 ( 2.73%) 0          0          72,537,002,223 ( 7.73%) 0          0                       0           0           0                 { return static_cast<void*>(&_M_storage); }
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 const void*
              .          .          .                       .          .          .                       .           .           .                 _M_addr() const noexcept
              .          .          .                       .          .          .                       .           .           .                 { return static_cast<const void*>(&_M_storage); }
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 _Tp*
 96,716,002,964 ( 3.64%) 0          0                       0          0          0          48,358,001,482 ( 6.64%)  0           0                 _M_ptr() noexcept
120,895,003,705 ( 4.55%) 1 ( 0.01%) 1 ( 0.01%) 72,537,002,223 ( 7.73%) 0          0          24,179,000,741 ( 3.32%)  0           0                 { return static_cast<_Tp*>(_M_addr()); }
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .                 const _Tp*
              .          .          .                       .          .          .                       .           .           .                 _M_ptr() const noexcept
              .          .          .                       .          .          .                       .           .           .                 { return static_cast<const _Tp*>(_M_addr()); }
              .          .          .                       .          .          .                       .           .           .               };
              .          .          .                       .          .          .                       .           .           .           
              .          .          .                       .          .          .                       .           .           .           #if _GLIBCXX_INLINE_VERSION
              .          .          .                       .          .          .                       .           .           .             template<typename _Tp>
-- line 81 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 451 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Allocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects to allocate space for.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls @c a.allocate(n)
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
2,040,246,735 ( 0.08%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,224,148,041 ( 0.17%) 0          0                 allocate(allocator_type& __a, size_type __n)
3,264,394,776 ( 0.12%) 0          0          1,632,197,388 ( 0.17%) 0          0            408,049,347 ( 0.06%) 0          0                 { return __a.allocate(__n); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Allocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects to allocate space for.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __hint Aid to locality.
            .          .          .                      .          .          .                      .          .          .                  *  @return Memory of suitable size and alignment for @a n objects
            .          .          .                      .          .          .                      .          .          .                  *          of type @c value_type
-- line 468 ----------------------------------------
-- line 483 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Deallocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to the memory to deallocate.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects space was allocated for.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls <tt> a.deallocate(p, n) </tt>
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 static _GLIBCXX20_CONSTEXPR void
2,448,296,082 ( 0.09%) 0          0                      0          0          0          1,632,197,388 ( 0.22%) 0          0                 deallocate(allocator_type& __a, pointer __p, size_type __n)
3,672,444,123 ( 0.14%) 1 ( 0.01%) 0          2,040,246,735 ( 0.22%) 0          0            408,049,347 ( 0.06%) 0          0                 { __a.deallocate(__p, __n); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Construct an object of type `_Up`
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to memory of suitable size and alignment for
            .          .          .                      .          .          .                      .          .          .                  *	       an object of type `_Up`.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __args Constructor arguments.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
            .          .          .                      .          .          .                      .          .          .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
            .          .          .                      .          .          .                      .          .          .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 template<typename _Up, typename... _Args>
            .          .          .                      .          .          .                      .          .          .           	static _GLIBCXX20_CONSTEXPR void
2,448,296,082 ( 0.09%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,632,197,388 ( 0.22%) 0          0           	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
            .          .          .                      .          .          .                      .          .          .           		  _Args&&... __args)
            .          .          .                      .          .          .                      .          .          .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
            .          .          .                      .          .          .                      .          .          .           	{
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus <= 201703L
3,672,444,123 ( 0.14%) 2 ( 0.01%) 1 ( 0.01%) 1,224,148,041 ( 0.13%) 0          0            816,098,694 ( 0.11%) 0          0           	  __a.construct(__p, std::forward<_Args>(__args)...);
            .          .          .                      .          .          .                      .          .          .           #else
            .          .          .                      .          .          .                      .          .          .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
            .          .          .                      .          .          .                      .          .          .           #endif
1,224,148,041 ( 0.05%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0           	}
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Destroy an object of type @a _Up
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to the object to destroy
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls @c __a.destroy(__p).
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 template<typename _Up>
            .          .          .                      .          .          .                      .          .          .           	static _GLIBCXX20_CONSTEXPR void
2,040,246,735 ( 0.08%) 0          0                      0          0          0          1,224,148,041 ( 0.17%) 0          0           	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
            .          .          .                      .          .          .                      .          .          .           	noexcept(is_nothrow_destructible<_Up>::value)
            .          .          .                      .          .          .                      .          .          .           	{
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus <= 201703L
2,040,246,735 ( 0.08%) 0          0            816,098,694 ( 0.09%) 0          0            408,049,347 ( 0.06%) 0          0           	  __a.destroy(__p);
            .          .          .                      .          .          .                      .          .          .           #else
            .          .          .                      .          .          .                      .          .          .           	  std::destroy_at(__p);
            .          .          .                      .          .          .                      .          .          .           #endif
1,224,148,041 ( 0.05%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0           	}
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  The maximum supported allocation size
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @return @c __a.max_size()
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 static _GLIBCXX20_CONSTEXPR size_type
            .          .          .                      .          .          .                      .          .          .                 max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
-- line 543 ----------------------------------------
-- line 627 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc>
            .          .          .                      .          .          .                      .          .          .               inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
            .          .          .                      .          .          .                      .          .          .               { }
            .          .          .                      .          .          .                      .          .          .           #endif
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc>
            .          .          .                      .          .          .                      .          .          .               _GLIBCXX14_CONSTEXPR inline void
3,264,392,008 ( 0.12%) 0          0                      0          0          0          2,448,294,006 ( 0.34%) 0          0               __alloc_on_swap(_Alloc& __one, _Alloc& __two)
            .          .          .                      .          .          .                      .          .          .               {
            .          .          .                      .          .          .                      .          .          .                 typedef allocator_traits<_Alloc> __traits;
            .          .          .                      .          .          .                      .          .          .                 typedef typename __traits::propagate_on_container_swap __pocs;
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus >= 201703L
            .          .          .                      .          .          .                      .          .          .                 if constexpr (__pocs::value)
            .          .          .                      .          .          .                      .          .          .           	{
            .          .          .                      .          .          .                      .          .          .           	  using std::swap;
            .          .          .                      .          .          .                      .          .          .           	  swap(__one, __two);
            .          .          .                      .          .          .                      .          .          .           	}
            .          .          .                      .          .          .                      .          .          .           #else
            .          .          .                      .          .          .                      .          .          .                 __do_alloc_on_swap(__one, __two, __pocs());
            .          .          .                      .          .          .                      .          .          .           #endif
2,448,294,006 ( 0.09%) 0          0          1,632,196,004 ( 0.17%) 0          0                      0          0          0               }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc, typename _Tp,
            .          .          .                      .          .          .                      .          .          .           	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
            .          .          .                      .          .          .                      .          .          .           	   typename = void>
            .          .          .                      .          .          .                      .          .          .               struct __is_alloc_insertable_impl
            .          .          .                      .          .          .                      .          .          .               : false_type
            .          .          .                      .          .          .                      .          .          .               { };
            .          .          .                      .          .          .                      .          .          .           
-- line 656 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/ext/alloc_traits.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 92 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                 std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
            .          .          .                      .          .          .                      .          .          .                 destroy(_Alloc& __a, _Ptr __p)
            .          .          .                      .          .          .                      .          .          .                 noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
            .          .          .                      .          .          .                      .          .          .                 { _Base_type::destroy(__a, std::__to_address(__p)); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
            .          .          .                      .          .          .                      .          .          .               { return _Base_type::select_on_container_copy_construction(__a); }
            .          .          .                      .          .          .                      .          .          .           
4,080,490,010 ( 0.15%) 0          0                      0          0          0          2,448,294,006 ( 0.34%) 0          0               static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
6,528,784,016 ( 0.25%) 0          0          3,264,392,008 ( 0.35%) 0          0            816,098,002 ( 0.11%) 0          0               { std::__alloc_on_swap(__a, __b); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               static constexpr bool _S_propagate_on_copy_assign()
            .          .          .                      .          .          .                      .          .          .               { return _Base_type::propagate_on_container_copy_assignment::value; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               static constexpr bool _S_propagate_on_move_assign()
            .          .          .                      .          .          .                      .          .          .               { return _Base_type::propagate_on_container_move_assignment::value; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               static constexpr bool _S_propagate_on_swap()
-- line 109 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/allocator.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 136 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                 typedef true_type propagate_on_container_move_assignment;
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 typedef true_type is_always_equal;
            .          .          .                      .          .          .                      .          .          .           #endif
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .          .          .                 // 3035. std::allocator's constructors should be constexpr
            .          .          .                      .          .          .                      .          .          .                 _GLIBCXX20_CONSTEXPR
       52,800 ( 0.00%) 0          0                 15,840 ( 0.00%) 0          0                 15,840 ( 0.00%) 0          0                 allocator() _GLIBCXX_NOTHROW { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 _GLIBCXX20_CONSTEXPR
            .          .          .                      .          .          .                      .          .          .                 allocator(const allocator& __a) _GLIBCXX_NOTHROW
            .          .          .                      .          .          .                      .          .          .                 : __allocator_base<_Tp>(__a) { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .          .          .                 // Avoid implicit deprecation.
            .          .          .                      .          .          .                      .          .          .                 allocator& operator=(const allocator&) = default;
-- line 152 ----------------------------------------
-- line 154 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 template<typename _Tp1>
            .          .          .                      .          .          .                      .          .          .           	_GLIBCXX20_CONSTEXPR
            .          .          .                      .          .          .                      .          .          .           	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           #if __cpp_constexpr_dynamic_alloc
            .          .          .                      .          .          .                      .          .          .                 constexpr
            .          .          .                      .          .          .                      .          .          .           #endif
       52,800 ( 0.00%) 0          0                 15,840 ( 0.00%) 0          0                 15,840 ( 0.00%) 0          0                 ~allocator() _GLIBCXX_NOTHROW { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus > 201703L
            .          .          .                      .          .          .                      .          .          .                 [[nodiscard,__gnu__::__always_inline__]]
            .          .          .                      .          .          .                      .          .          .                 constexpr _Tp*
            .          .          .                      .          .          .                      .          .          .                 allocate(size_t __n)
            .          .          .                      .          .          .                      .          .          .                 {
            .          .          .                      .          .          .                      .          .          .           #ifdef __cpp_lib_is_constant_evaluated
            .          .          .                      .          .          .                      .          .          .           	if (std::is_constant_evaluated())
-- line 170 ----------------------------------------
-- line 270 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                 }
            .          .          .                      .          .          .                      .          .          .               };
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             // Optimize for stateless allocators.
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc, bool = __is_empty(_Alloc)>
            .          .          .                      .          .          .                      .          .          .               struct __alloc_neq
            .          .          .                      .          .          .                      .          .          .               {
            .          .          .                      .          .          .                      .          .          .                 static bool
3,264,397,808 ( 0.12%) 0          0                      0          0          0          2,448,298,356 ( 0.34%) 0          0                 _S_do_it(const _Alloc&, const _Alloc&)
2,448,298,356 ( 0.09%) 0          0          1,632,198,904 ( 0.17%) 0          0                      0          0          0                 { return false; }
            .          .          .                      .          .          .                      .          .          .               };
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc>
            .          .          .                      .          .          .                      .          .          .               struct __alloc_neq<_Alloc, false>
            .          .          .                      .          .          .                      .          .          .               {
            .          .          .                      .          .          .                      .          .          .                 static bool
            .          .          .                      .          .          .                      .          .          .                 _S_do_it(const _Alloc& __one, const _Alloc& __two)
            .          .          .                      .          .          .                      .          .          .                 { return __one != __two; }
-- line 287 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/list.tcc
--------------------------------------------------------------------------------
Ir                       I1mr         ILmr         Dr                      D1mr                   DLmr                   Dw                      D1mw        DLmw        

-- line 58 ----------------------------------------
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .           namespace std _GLIBCXX_VISIBILITY(default)
              .            .            .                       .                      .                      .                       .           .           .           {
              .            .            .                       .                      .                      .                       .           .           .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
              .            .            .                       .                      .                      .                       .           .           .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               void
         21,120 ( 0.00%)   1 ( 0.01%)   1 ( 0.01%)              0                      0                      0                  10,560 ( 0.00%)  0           0               _List_base<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .               _M_clear() _GLIBCXX_NOEXCEPT
              .            .            .                       .                      .                      .                       .           .           .               {
              .            .            .                       .                      .                      .                       .           .           .                 typedef _List_node<_Tp>  _Node;
         15,840 ( 0.00%)   0            0                  10,560 ( 0.00%)         1,869 ( 0.00%)         1,212 ( 0.00%)          5,280 ( 0.00%)  0           0                 __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
  1,224,169,161 ( 0.05%)   1 ( 0.01%)   1 ( 0.01%)    816,109,254 ( 0.09%)             0                      0                       0           0           0                 while (__cur != &_M_impl._M_node)
              .            .            .                       .                      .                      .                       .           .           .           	{
    816,098,694 ( 0.03%)   0            0             408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)  0           0           	  _Node* __tmp = static_cast<_Node*>(__cur);
  1,224,148,041 ( 0.05%)   0            0             816,098,694 ( 0.09%)   407,996,826 ( 2.31%)   396,149,943 ( 3.23%)    408,049,347 ( 0.06%)  0           0           	  __cur = __tmp->_M_next;
  1,632,197,388 ( 0.06%)   0            0             408,049,347 ( 0.04%)             0                      0             816,098,694 ( 0.11%)  0           0           	  _Tp* __val = __tmp->_M_valptr();
              .            .            .                       .                      .                      .                       .           .           .           #if __cplusplus >= 201103L
  3,264,394,776 ( 0.12%)   0            0             816,098,694 ( 0.09%)             0                      0             816,098,694 ( 0.11%)  0           0           	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
              .            .            .                       .                      .                      .                       .           .           .           #else
              .            .            .                       .                      .                      .                       .           .           .           	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
              .            .            .                       .                      .                      .                       .           .           .           #endif
  2,040,246,735 ( 0.08%)   0            0             816,098,694 ( 0.09%)             0                      0             408,049,347 ( 0.06%)  0           0           	  _M_put_node(__tmp);
              .            .            .                       .                      .                      .                       .           .           .           	}
         21,120 ( 0.00%)   0            0                  10,560 ( 0.00%)             0                      0                       0           0           0               }
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .           #if __cplusplus >= 201103L
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               template<typename... _Args>
              .            .            .                       .                      .                      .                       .           .           .                 typename list<_Tp, _Alloc>::iterator
              .            .            .                       .                      .                      .                       .           .           .                 list<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .                 emplace(const_iterator __position, _Args&&... __args)
              .            .            .                       .                      .                      .                       .           .           .                 {
-- line 91 ----------------------------------------
-- line 394 ----------------------------------------
              .            .            .                       .                      .                      .                       .           .           .                 return _GLIBCXX20_ONLY( __removed );
              .            .            .                       .                      .                      .                       .           .           .           #else
              .            .            .                       .                      .                      .                       .           .           .                 return _GLIBCXX20_ONLY( __to_destroy.size() );
              .            .            .                       .                      .                      .                       .           .           .           #endif
              .            .            .                       .                      .                      .                       .           .           .               }
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               void
  3,672,450,945 ( 0.14%)   0            0             408,050,105 ( 0.04%)             0                      0           2,040,250,525 ( 0.28%)  0           0               list<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .           #if __cplusplus >= 201103L
              .            .            .                       .                      .                      .                       .           .           .               merge(list&& __x)
              .            .            .                       .                      .                      .                       .           .           .           #else
              .            .            .                       .                      .                      .                       .           .           .               merge(list& __x)
              .            .            .                       .                      .                      .                       .           .           .           #endif
              .            .            .                       .                      .                      .                       .           .           .               {
              .            .            .                       .                      .                      .                       .           .           .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
              .            .            .                       .                      .                      .                       .           .           .                 // 300. list::merge() specification incomplete
  2,856,350,735 ( 0.11%)   1 ( 0.01%)   1 ( 0.01%)    816,100,210 ( 0.09%)             0                      0             408,050,105 ( 0.06%)  0           0                 if (this != std::__addressof(__x))
              .            .            .                       .                      .                      .                       .           .           .           	{
  2,040,250,525 ( 0.08%)   0            0             816,100,210 ( 0.09%)             0                      0             408,050,105 ( 0.06%)  0           0           	  _M_check_equal_allocators(__x);
              .            .            .                       .                      .                      .                       .           .           .           
  1,632,200,420 ( 0.06%)   0            0             408,050,105 ( 0.04%)             0                      0             816,100,210 ( 0.11%)  0           0           	  iterator __first1 = begin();
  1,632,200,420 ( 0.06%)   1 ( 0.01%)   1 ( 0.01%)    408,050,105 ( 0.04%)             0                      0             816,100,210 ( 0.11%)  0           0           	  iterator __last1 = end();
  1,632,200,420 ( 0.06%)   0            0             408,050,105 ( 0.04%)             0                      0             816,100,210 ( 0.11%)  0           0           	  iterator __first2 = __x.begin();
  1,632,200,420 ( 0.06%)   0            0             408,050,105 ( 0.04%)             0                      0             816,100,210 ( 0.11%)  0           0           	  iterator __last2 = __x.end();
  1,632,200,420 ( 0.06%)   0            0             408,050,105 ( 0.04%)             0                      0             816,100,210 ( 0.11%)  0           0           	  const size_t __orig_size = __x.size();
              .            .            .                       .                      .                      .                       .           .           .           	  __try {
174,061,131,007 ( 6.56%) 160 ( 0.95%) 107 ( 0.87%)              0                      0                      0          19,294,787,949 ( 2.65%)  0           0           	    while (__first1 != __last1 && __first2 != __last2)
112,096,244,832 ( 4.22%)  80 ( 0.47%)  53 ( 0.43%) 18,682,707,472 ( 1.99%) 5,076,502,324 (28.76%) 2,590,947,534 (21.15%) 18,682,707,472 ( 2.57%)  0           0           	      if (*__first2 < *__first1)
              .            .            .                       .                      .                      .                       .           .           .           		{
  9,077,426,274 ( 0.34%)   0            0           4,538,713,137 ( 0.48%)             0                      0           4,538,713,137 ( 0.62%)  0           0           		  iterator __next = __first2;
 45,387,131,370 ( 1.71%)   0            0          18,154,852,548 ( 1.94%)             0                      0           9,077,426,274 ( 1.25%)  0           0           		  _M_transfer(__first1, __first2, ++__next);
 13,616,139,411 ( 0.51%)   0            0           4,538,713,137 ( 0.48%)             0                      0           4,538,713,137 ( 0.62%)  0           0           		  __first2 = __next;
              .            .            .                       .                      .                      .                       .           .           .           		}
              .            .            .                       .                      .                      .                       .           .           .           	      else
 14,407,921,797 ( 0.54%)   0            0                       0                      0                      0           4,802,640,599 ( 0.66%)  0           0           		++__first1;
  2,856,350,735 ( 0.11%)   0            0                       0                      0                      0             408,050,105 ( 0.06%)  0           0           	    if (__first2 != __last2)
  1,224,118,110 ( 0.05%)   0            0             816,078,740 ( 0.09%)             0                      0             204,019,685 ( 0.03%)  0           0           	      _M_transfer(__last1, __first2, __last2);
              .            .            .                       .                      .                      .                       .           .           .           
  2,856,350,735 ( 0.11%)   1 ( 0.01%)   1 ( 0.01%)    816,100,210 ( 0.09%)             0                      0             816,100,210 ( 0.11%)  0           0           	    this->_M_inc_size(__x._M_get_size());
  1,632,200,420 ( 0.06%)   0            0             408,050,105 ( 0.04%)             0                      0             408,050,105 ( 0.06%)  0           0           	    __x._M_set_size(0);
              .            .            .                       .                      .                      .                       .           .           .           	  }
              .            .            .                       .                      .                      .                       .           .           .           	  __catch(...)
              .            .            .                       .                      .                      .                       .           .           .           	    {
              .            .            .                       .                      .                      .                       .           .           .           	      const size_t __dist = std::distance(__first2, __last2);
              .            .            .                       .                      .                      .                       .           .           .           	      this->_M_inc_size(__orig_size - __dist);
              .            .            .                       .                      .                      .                       .           .           .           	      __x._M_set_size(__dist);
              .            .            .                       .                      .                      .                       .           .           .           	      __throw_exception_again;
              .            .            .                       .                      .                      .                       .           .           .           	    }
              .            .            .                       .                      .                      .                       .           .           .           	}
  2,856,350,735 ( 0.11%)   0            0           2,040,250,525 ( 0.22%)     3,657,422 ( 0.02%)        13,079 ( 0.00%)              0           0           0               }
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               template <typename _StrictWeakOrdering>
              .            .            .                       .                      .                      .                       .           .           .                 void
              .            .            .                       .                      .                      .                       .           .           .                 list<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .           #if __cplusplus >= 201103L
              .            .            .                       .                      .                      .                       .           .           .                 merge(list&& __x, _StrictWeakOrdering __comp)
              .            .            .                       .                      .                      .                       .           .           .           #else
-- line 452 ----------------------------------------
-- line 488 ----------------------------------------
              .            .            .                       .                      .                      .                       .           .           .           		__x._M_set_size(__dist);
              .            .            .                       .                      .                      .                       .           .           .           		__throw_exception_again;
              .            .            .                       .                      .                      .                       .           .           .           	      }
              .            .            .                       .                      .                      .                       .           .           .           	  }
              .            .            .                       .                      .                      .                       .           .           .                 }
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               void
            720 ( 0.00%)   0            0                      80 ( 0.00%)             0                      0                     400 ( 0.00%) 80 ( 0.00%) 52 ( 0.00%)      list<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .               sort()
              .            .            .                       .                      .                      .                       .           .           .               {
              .            .            .                       .                      .                      .                       .           .           .                 // Do nothing if the list has length 0 or 1.
            400 ( 0.00%)  80 ( 0.47%)  53 ( 0.43%)            240 ( 0.00%)             0                      0                       0           0           0                 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
            480 ( 0.00%)   0            0                     320 ( 0.00%)            80 ( 0.00%)            46 ( 0.00%)              0           0           0           	  && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
              .            .            .                       .                      .                      .                       .           .           .                 {
            240 ( 0.00%)   0            0                       0                      0                      0                      80 ( 0.00%)  0           0                   list __carry;
         46,800 ( 0.00%)  80 ( 0.47%)  53 ( 0.43%)              0                      0                      0                  10,240 ( 0.00%)  0           0                   list __tmp[64];
            160 ( 0.00%)   0            0                       0                      0                      0                      80 ( 0.00%)  0           0                   list * __fill = __tmp;
              .            .            .                       .                      .                      .                       .           .           .                   list * __counter;
              .            .            .                       .                      .                      .                       .           .           .           	__try
              .            .            .                       .                      .                      .                       .           .           .           	  {
              .            .            .                       .                      .                      .                       .           .           .           	    do
              .            .            .                       .                      .                      .                       .           .           .           	      {
  9,793,184,328 ( 0.37%)  81 ( 0.48%)  55 ( 0.45%)  1,632,197,388 ( 0.17%)             0                      0           2,856,345,429 ( 0.39%)  0           0           		__carry.splice(__carry.begin(), *this, begin());
              .            .            .                       .                      .                      .                       .           .           .           
  1,632,196,616 ( 0.06%)   2 ( 0.01%)   1 ( 0.01%)    408,048,575 ( 0.04%)             0                      0             408,049,347 ( 0.06%)  0           0           		for(__counter = __tmp;
 10,201,213,979 ( 0.38%)   1 ( 0.01%)   1 ( 0.01%)  2,448,292,156 ( 0.26%)             0                      0             816,096,312 ( 0.11%)  0           0           		    __counter != __fill && !__counter->empty();
              .            .            .                       .                      .                      .                       .           .           .           		    ++__counter)
              .            .            .                       .                      .                      .                       .           .           .           		  {
  2,040,242,875 ( 0.08%)   0            0             408,048,575 ( 0.04%)             0                      0             408,048,575 ( 0.06%)  0           0           		    __counter->merge(__carry);
  2,040,242,875 ( 0.08%)   0            0             408,048,575 ( 0.04%)             0                      0             408,048,575 ( 0.06%)  0           0           		    __carry.swap(*__counter);
              .            .            .                       .                      .                      .                       .           .           .           		  }
  2,040,246,735 ( 0.08%)   1 ( 0.01%)   1 ( 0.01%)    408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)  0           0           		__carry.swap(*__counter);
  1,224,148,041 ( 0.05%)   0            0             816,098,694 ( 0.09%)             0                      0                       0           0           0           		if (__counter == __fill)
          1,610 ( 0.00%)   0            0                   1,610 ( 0.00%)             0                      0                       0           0           0           		  ++__fill;
              .            .            .                       .                      .                      .                       .           .           .           	      }
  2,448,296,082 ( 0.09%)   2 ( 0.01%)   1 ( 0.01%)    408,049,347 ( 0.04%)             0                      0             408,049,347 ( 0.06%)  0           0           	    while ( !empty() );
              .            .            .                       .                      .                      .                       .           .           .           
          6,680 ( 0.00%)   2 ( 0.01%)   1 ( 0.01%)          4,750 ( 0.00%)           408 ( 0.00%)           175 ( 0.00%)             80 ( 0.00%)  0           0           	    for (__counter = __tmp + 1; __counter != __fill; ++__counter)
          9,180 ( 0.00%)   0            0                   3,060 ( 0.00%)             0                      0                   1,530 ( 0.00%)  0           0           	      __counter->merge(*(__counter - 1));
            480 ( 0.00%)   0            0                     160 ( 0.00%)             0                      0                      80 ( 0.00%)  0           0           	    swap( *(__fill - 1) );
              .            .            .                       .                      .                      .                       .           .           .           	  }
              .            .            .                       .                      .                      .                       .           .           .           	__catch(...)
              .            .            .                       .                      .                      .                       .           .           .           	  {
              .            .            .                       .                      .                      .                       .           .           .           	    this->splice(this->end(), __carry);
              .            .            .                       .                      .                      .                       .           .           .           	    for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)
              .            .            .                       .                      .                      .                       .           .           .           	      this->splice(this->end(), __tmp[__i]);
              .            .            .                       .                      .                      .                       .           .           .           	    __throw_exception_again;
              .            .            .                       .                      .                      .                       .           .           .           	  }
         20,960 ( 0.00%)  80 ( 0.47%)  53 ( 0.43%)              0                      0                      0                      80 ( 0.00%)  0           0                 }
            800 ( 0.00%)   1 ( 0.01%)   1 ( 0.01%)            480 ( 0.00%)            80 ( 0.00%)            52 ( 0.00%)              0           0           0               }
              .            .            .                       .                      .                      .                       .           .           .           
              .            .            .                       .                      .                      .                       .           .           .             template<typename _Tp, typename _Alloc>
              .            .            .                       .                      .                      .                       .           .           .               template <typename _Predicate>
              .            .            .                       .                      .                      .                       .           .           .                 typename list<_Tp, _Alloc>::__remove_return_type
              .            .            .                       .                      .                      .                       .           .           .                 list<_Tp, _Alloc>::
              .            .            .                       .                      .                      .                       .           .           .                 remove_if(_Predicate __pred)
              .            .            .                       .                      .                      .                       .           .           .                 {
              .            .            .                       .                      .                      .                       .           .           .           #if !_GLIBCXX_USE_CXX11_ABI
-- line 546 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 85 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .                 /** Parameter type. */
            .           .           .                      .          .          .                      .          .          .                 struct param_type
            .           .           .                      .          .          .                      .          .          .                 {
            .           .           .                      .          .          .                      .          .          .           	typedef uniform_int_distribution<_IntType> distribution_type;
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	param_type() : param_type(0) { }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	explicit
          400 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)             0          0          0                    320 ( 0.00%) 0          0           	param_type(_IntType __a,
            .           .           .                      .          .          .                      .          .          .           		   _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)
          480 ( 0.00%)  0           0                    320 ( 0.00%) 0          0                    160 ( 0.00%) 0          0           	: _M_a(__a), _M_b(__b)
            .           .           .                      .          .          .                      .          .          .           	{
            .           .           .                      .          .          .                      .          .          .           	  __glibcxx_assert(_M_a <= _M_b);
          240 ( 0.00%)  0           0                    160 ( 0.00%) 0          0                      0          0          0           	}
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	result_type
2,448,296,082 ( 0.09%)  0           0                      0          0          0          1,632,197,388 ( 0.22%) 0          0           	a() const
3,264,394,776 ( 0.12%)  0           0          3,264,394,776 ( 0.35%) 0          0                      0          0          0           	{ return _M_a; }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	result_type
1,224,148,041 ( 0.05%) 81 ( 0.48%) 53 ( 0.43%)             0          0          0            816,098,694 ( 0.11%) 0          0           	b() const
1,632,197,388 ( 0.06%)  0           0          1,632,197,388 ( 0.17%) 0          0                      0          0          0           	{ return _M_b; }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	friend bool
            .           .           .                      .          .          .                      .          .          .           	operator==(const param_type& __p1, const param_type& __p2)
            .           .           .                      .          .          .                      .          .          .           	{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	friend bool
            .           .           .                      .          .          .                      .          .          .           	operator!=(const param_type& __p1, const param_type& __p2)
            .           .           .                      .          .          .                      .          .          .           	{ return !(__p1 == __p2); }
-- line 114 ----------------------------------------
-- line 123 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .                  * @brief Constructs a uniform distribution object.
            .           .           .                      .          .          .                      .          .          .                  */
            .           .           .                      .          .          .                      .          .          .                 uniform_int_distribution() : uniform_int_distribution(0) { }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 /**
            .           .           .                      .          .          .                      .          .          .                  * @brief Constructs a uniform distribution object.
            .           .           .                      .          .          .                      .          .          .                  */
            .           .           .                      .          .          .                      .          .          .                 explicit
          480 ( 0.00%)  0           0                      0          0          0                    320 ( 0.00%) 0          0                 uniform_int_distribution(_IntType __a,
            .           .           .                      .          .          .                      .          .          .           			       _IntType __b
            .           .           .                      .          .          .                      .          .          .           				 = __gnu_cxx::__int_traits<_IntType>::__max)
          480 ( 0.00%)  0           0                    240 ( 0.00%) 0          0                     80 ( 0.00%) 0          0                 : _M_param(__a, __b)
          240 ( 0.00%)  0           0                    160 ( 0.00%) 0          0                      0          0          0                 { }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 explicit
            .           .           .                      .          .          .                      .          .          .                 uniform_int_distribution(const param_type& __p)
            .           .           .                      .          .          .                      .          .          .                 : _M_param(__p)
            .           .           .                      .          .          .                      .          .          .                 { }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 /**
            .           .           .                      .          .          .                      .          .          .                  * @brief Resets the distribution state.
-- line 143 ----------------------------------------
-- line 184 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .                 max() const
            .           .           .                      .          .          .                      .          .          .                 { return this->b(); }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 /**
            .           .           .                      .          .          .                      .          .          .                  * @brief Generating functions.
            .           .           .                      .          .          .                      .          .          .                  */
            .           .           .                      .          .          .                      .          .          .                 template<typename _UniformRandomBitGenerator>
            .           .           .                      .          .          .                      .          .          .           	result_type
2,040,246,735 ( 0.08%)  1 ( 0.01%)  1 ( 0.01%)             0          0          0          1,224,148,041 ( 0.17%) 0          0           	operator()(_UniformRandomBitGenerator& __urng)
3,264,394,776 ( 0.12%)  1 ( 0.01%)  1 ( 0.01%) 2,040,246,735 ( 0.22%) 0          0            408,049,347 ( 0.06%) 0          0                   { return this->operator()(__urng, _M_param); }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 template<typename _UniformRandomBitGenerator>
            .           .           .                      .          .          .                      .          .          .           	result_type
            .           .           .                      .          .          .                      .          .          .           	operator()(_UniformRandomBitGenerator& __urng,
            .           .           .                      .          .          .                      .          .          .           		   const param_type& __p);
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 template<typename _ForwardIterator,
            .           .           .                      .          .          .                      .          .          .           	       typename _UniformRandomBitGenerator>
-- line 201 ----------------------------------------
-- line 238 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 param_type _M_param;
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .                 // Lemire's nearly divisionless algorithm.
            .           .           .                      .          .          .                      .          .          .                 // Returns an unbiased random number from __g downscaled to [0,__range)
            .           .           .                      .          .          .                      .          .          .                 // using an unsigned type _Wp twice as wide as unsigned type _Up.
            .           .           .                      .          .          .                      .          .          .                 template<typename _Wp, typename _Urbg, typename _Up>
            .           .           .                      .          .          .                      .          .          .           	static _Up
2,040,246,735 ( 0.08%)  0           0                      0          0          0          1,224,148,041 ( 0.17%) 0          0           	_S_nd(_Urbg& __g, _Up __range)
            .           .           .                      .          .          .                      .          .          .           	{
            .           .           .                      .          .          .                      .          .          .           	  using _Up_traits = __gnu_cxx::__int_traits<_Up>;
            .           .           .                      .          .          .                      .          .          .           	  using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;
            .           .           .                      .          .          .                      .          .          .           	  static_assert(!_Up_traits::__is_signed, "U must be unsigned");
            .           .           .                      .          .          .                      .          .          .           	  static_assert(!_Wp_traits::__is_signed, "W must be unsigned");
            .           .           .                      .          .          .                      .          .          .           	  static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),
            .           .           .                      .          .          .                      .          .          .           			"W must be twice as wide as U");
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	  // reference: Fast Random Integer Generation in an Interval
            .           .           .                      .          .          .                      .          .          .           	  // ACM Transactions on Modeling and Computer Simulation 29 (1), 2019
            .           .           .                      .          .          .                      .          .          .           	  // https://arxiv.org/abs/1805.10941
2,448,296,082 ( 0.09%) 80 ( 0.47%) 52 ( 0.42%)   816,098,694 ( 0.09%) 0          0            816,098,694 ( 0.11%) 0          0           	  _Wp __product = _Wp(__g()) * _Wp(__range);
  816,098,694 ( 0.03%)  0           0            408,049,347 ( 0.04%) 0          0            408,049,347 ( 0.06%) 0          0           	  _Up __low = _Up(__product);
1,224,148,041 ( 0.05%)  0           0            816,098,694 ( 0.09%) 0          0                      0          0          0           	  if (__low < __range)
            .           .           .                      .          .          .                      .          .          .           	    {
    9,274,865 ( 0.00%)  0           0              3,709,946 ( 0.00%) 0          0              1,854,973 ( 0.00%) 0          0           	      _Up __threshold = -__range % __range;
   10,022,335 ( 0.00%)  0           0              5,444,908 ( 0.00%) 0          0                      0          0          0           	      while (__low < __threshold)
            .           .           .                      .          .          .                      .          .          .           		{
    5,204,886 ( 0.00%)  0           0              1,734,962 ( 0.00%) 0          0              1,734,962 ( 0.00%) 0          0           		  __product = _Wp(__g()) * _Wp(__range);
    1,734,962 ( 0.00%)  0           0                867,481 ( 0.00%) 0          0                867,481 ( 0.00%) 0          0           		  __low = _Up(__product);
            .           .           .                      .          .          .                      .          .          .           		}
            .           .           .                      .          .          .                      .          .          .           	    }
  816,098,694 ( 0.03%)  0           0            408,049,347 ( 0.04%) 0          0                      0          0          0           	  return __product >> _Up_traits::__digits;
  816,098,694 ( 0.03%)  0           0            816,098,694 ( 0.09%) 0          0                      0          0          0           	}
            .           .           .                      .          .          .                      .          .          .               };
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .             template<typename _IntType>
            .           .           .                      .          .          .                      .          .          .               template<typename _UniformRandomBitGenerator>
            .           .           .                      .          .          .                      .          .          .                 typename uniform_int_distribution<_IntType>::result_type
4,080,493,470 ( 0.15%)  1 ( 0.01%)  1 ( 0.01%)   408,049,347 ( 0.04%) 0          0          2,448,296,082 ( 0.34%) 0          0                 uniform_int_distribution<_IntType>::
            .           .           .                      .          .          .                      .          .          .                 operator()(_UniformRandomBitGenerator& __urng,
            .           .           .                      .          .          .                      .          .          .           		 const param_type& __param)
            .           .           .                      .          .          .                      .          .          .                 {
            .           .           .                      .          .          .                      .          .          .           	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
            .           .           .                      .          .          .                      .          .          .           	typedef typename make_unsigned<result_type>::type __utype;
            .           .           .                      .          .          .                      .          .          .           	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
            .           .           .                      .          .          .                      .          .          .           
  408,049,347 ( 0.02%)  0           0                      0          0          0            408,049,347 ( 0.06%) 0          0           	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
  816,098,694 ( 0.03%)  0           0                      0          0          0            408,049,347 ( 0.06%) 0          0           	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
            .           .           .                      .          .          .                      .          .          .           	static_assert( __urngmin < __urngmax,
            .           .           .                      .          .          .                      .          .          .           	    "Uniform random bit generator must define min() < max()");
  408,049,347 ( 0.02%)  2 ( 0.01%)  1 ( 0.01%)             0          0          0            408,049,347 ( 0.06%) 0          0           	constexpr __uctype __urngrange = __urngmax - __urngmin;
            .           .           .                      .          .          .                      .          .          .           
1,224,148,041 ( 0.05%)  0           0                      0          0          0            408,049,347 ( 0.06%) 0          0           	const __uctype __urange
3,264,394,776 ( 0.12%)  0           0            816,098,694 ( 0.09%) 0          0            816,098,694 ( 0.11%) 0          0           	  = __uctype(__param.b()) - __uctype(__param.a());
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           	__uctype __ret;
1,224,148,041 ( 0.05%)  0           0            408,049,347 ( 0.04%) 0          0                      0          0          0           	if (__urngrange > __urange)
            .           .           .                      .          .          .                      .          .          .           	  {
            .           .           .                      .          .          .                      .          .          .           	    // downscaling
            .           .           .                      .          .          .                      .          .          .           
1,224,148,041 ( 0.05%) 80 ( 0.47%) 52 ( 0.42%)   408,049,347 ( 0.04%) 0          0            408,049,347 ( 0.06%) 0          0           	    const __uctype __uerange = __urange + 1; // __urange can be zero
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
            .           .           .                      .          .          .                      .          .          .           #if __SIZEOF_INT128__
            .           .           .                      .          .          .                      .          .          .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
            .           .           .                      .          .          .                      .          .          .           	      {
            .           .           .                      .          .          .                      .          .          .           		// __urng produces values that use exactly 64-bits,
            .           .           .                      .          .          .                      .          .          .           		// so use 128-bit integers to downscale to desired range.
            .           .           .                      .          .          .                      .          .          .           		__UINT64_TYPE__ __u64erange = __uerange;
-- line 306 ----------------------------------------
-- line 307 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .           		__ret = _S_nd<unsigned __int128>(__urng, __u64erange);
            .           .           .                      .          .          .                      .          .          .           	      }
            .           .           .                      .          .          .                      .          .          .           	    else
            .           .           .                      .          .          .                      .          .          .           #endif
            .           .           .                      .          .          .                      .          .          .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)
            .           .           .                      .          .          .                      .          .          .           	      {
            .           .           .                      .          .          .                      .          .          .           		// __urng produces values that use exactly 32-bits,
            .           .           .                      .          .          .                      .          .          .           		// so use 64-bit integers to downscale to desired range.
  816,098,694 ( 0.03%)  0           0            408,049,347 ( 0.04%) 0          0            408,049,347 ( 0.06%) 0          0           		__UINT32_TYPE__ __u32erange = __uerange;
3,264,394,776 ( 0.12%)  0           0            816,098,694 ( 0.09%) 0          0            816,098,694 ( 0.11%) 0          0           		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
            .           .           .                      .          .          .                      .          .          .           	      }
            .           .           .                      .          .          .                      .          .          .           	    else
            .           .           .                      .          .          .                      .          .          .           #endif
            .           .           .                      .          .          .                      .          .          .           	      {
            .           .           .                      .          .          .                      .          .          .           		// fallback case (2 divisions)
            .           .           .                      .          .          .                      .          .          .           		const __uctype __scaling = __urngrange / __uerange;
            .           .           .                      .          .          .                      .          .          .           		const __uctype __past = __uerange * __scaling;
            .           .           .                      .          .          .                      .          .          .           		do
-- line 324 ----------------------------------------
-- line 352 ----------------------------------------
            .           .           .                      .          .          .                      .          .          .           			 (__urng, param_type(0, __urange / __uerngrange)));
            .           .           .                      .          .          .                      .          .          .           		__ret = __tmp + (__uctype(__urng()) - __urngmin);
            .           .           .                      .          .          .                      .          .          .           	      }
            .           .           .                      .          .          .                      .          .          .           	    while (__ret > __urange || __ret < __tmp);
            .           .           .                      .          .          .                      .          .          .           	  }
            .           .           .                      .          .          .                      .          .          .           	else
            .           .           .                      .          .          .                      .          .          .           	  __ret = __uctype(__urng()) - __urngmin;
            .           .           .                      .          .          .                      .          .          .           
2,448,296,082 ( 0.09%) 53 ( 0.31%) 29 ( 0.24%)   816,098,694 ( 0.09%) 0          0            408,049,347 ( 0.06%) 0          0           	return __ret + __param.a();
2,448,296,082 ( 0.09%)  0           0          2,040,246,735 ( 0.22%) 0          0                      0          0          0                 }
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .           
            .           .           .                      .          .          .                      .          .          .             template<typename _IntType>
            .           .           .                      .          .          .                      .          .          .               template<typename _ForwardIterator,
            .           .           .                      .          .          .                      .          .          .           	     typename _UniformRandomBitGenerator>
            .           .           .                      .          .          .                      .          .          .                 void
            .           .           .                      .          .          .                      .          .          .                 uniform_int_distribution<_IntType>::
            .           .           .                      .          .          .                      .          .          .                 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 369 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/move.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 41 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             // Used, in C++03 mode too, by allocators, etc.
            .          .          .                      .          .          .                      .          .          .             /**
            .          .          .                      .          .          .                      .          .          .              *  @brief Same as C++11 std::addressof
            .          .          .                      .          .          .                      .          .          .              *  @ingroup utilities
            .          .          .                      .          .          .                      .          .          .              */
            .          .          .                      .          .          .                      .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                      .          .          .               inline _GLIBCXX_CONSTEXPR _Tp*
3,672,446,397 ( 0.14%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          2,448,297,598 ( 0.34%) 0          0               __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
3,672,446,397 ( 0.14%) 0          0          3,672,446,397 ( 0.39%) 0          0                      0          0          0               { return __builtin_addressof(__r); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
            .          .          .                      .          .          .                      .          .          .           } // namespace
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           #include <type_traits> // Brings in std::declval too.
            .          .          .                      .          .          .                      .          .          .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .              *  @brief  Forward an lvalue.
            .          .          .                      .          .          .                      .          .          .              *  @return The parameter cast to the specified type.
            .          .          .                      .          .          .                      .          .          .              *
            .          .          .                      .          .          .                      .          .          .              *  This function is used to implement "perfect forwarding".
            .          .          .                      .          .          .                      .          .          .              */
            .          .          .                      .          .          .                      .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                      .          .          .               _GLIBCXX_NODISCARD
            .          .          .                      .          .          .                      .          .          .               constexpr _Tp&&
4,896,592,164 ( 0.18%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          3,264,394,776 ( 0.45%) 0          0               forward(typename std::remove_reference<_Tp>::type& __t) noexcept
4,896,592,164 ( 0.18%) 0          0          4,896,592,164 ( 0.52%) 0          0                      0          0          0               { return static_cast<_Tp&&>(__t); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             /**
            .          .          .                      .          .          .                      .          .          .              *  @brief  Forward an rvalue.
            .          .          .                      .          .          .                      .          .          .              *  @return The parameter cast to the specified type.
            .          .          .                      .          .          .                      .          .          .              *
            .          .          .                      .          .          .                      .          .          .              *  This function is used to implement "perfect forwarding".
            .          .          .                      .          .          .                      .          .          .              */
            .          .          .                      .          .          .                      .          .          .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .             /**
            .          .          .                      .          .          .                      .          .          .              *  @brief  Convert a value to an rvalue.
            .          .          .                      .          .          .                      .          .          .              *  @param  __t  A thing of arbitrary type.
            .          .          .                      .          .          .                      .          .          .              *  @return The parameter cast to an rvalue-reference to allow moving it.
            .          .          .                      .          .          .                      .          .          .             */
            .          .          .                      .          .          .                      .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                      .          .          .               _GLIBCXX_NODISCARD
            .          .          .                      .          .          .                      .          .          .               constexpr typename std::remove_reference<_Tp>::type&&
3,672,454,431 ( 0.14%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          2,448,302,954 ( 0.34%) 0          0               move(_Tp&& __t) noexcept
3,672,454,431 ( 0.14%) 0          0          3,672,454,431 ( 0.39%) 0          0                      0          0          0               { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                      .          .          .               struct __move_if_noexcept_cond
            .          .          .                      .          .          .                      .          .          .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
            .          .          .                      .          .          .                      .          .          .                               is_copy_constructible<_Tp>>::type { };
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .             /**
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir                      I1mr       ILmr       Dr                     D1mr                   DLmr                   Dw                     D1mw                 DLmw                 

-- line 80 ----------------------------------------
             .          .          .                      .                      .                      .                      .                    .                    .              *  @param  __last  End of range.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @param  __value  Starting value.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @return  Nothing.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @ingroup numeric_ops
             .          .          .                      .                      .                      .                      .                    .                    .              */
             .          .          .                      .                      .                      .                      .                    .                    .             template<typename _ForwardIterator, typename _Tp>
             .          .          .                      .                      .                      .                      .                    .                    .               _GLIBCXX20_CONSTEXPR
             .          .          .                      .                      .                      .                      .                    .                    .               void
           560 ( 0.00%) 0          0                      0                      0                      0                    400 ( 0.00%)           0                    0               iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
             .          .          .                      .                      .                      .                      .                    .                    .               {
             .          .          .                      .                      .                      .                      .                    .                    .                 // concept requirements
             .          .          .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
             .          .          .                      .                      .                      .                      .                    .                    .           				  _ForwardIterator>)
             .          .          .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_ConvertibleConcept<_Tp,
             .          .          .                      .                      .                      .                      .                    .                    .           	    typename iterator_traits<_ForwardIterator>::value_type>)
             .          .          .                      .                      .                      .                      .                    .                    .                 __glibcxx_requires_valid_range(__first, __last);
             .          .          .                      .                      .                      .                      .                    .                    .           
 4,080,494,110 ( 0.15%) 2 ( 0.01%) 1 ( 0.01%)             0                      0                      0            816,098,774 ( 0.11%)           0                    0                 for (; __first != __last; ++__first)
             .          .          .                      .                      .                      .                      .                    .                    .           	{
 2,040,246,735 ( 0.08%) 0          0            408,049,347 ( 0.04%)             0                      0            816,098,694 ( 0.11%) 408,001,069 (67.13%) 396,421,989 (67.51%)  	  *__first = __value;
   408,049,347 ( 0.02%) 0          0            408,049,347 ( 0.04%)             0                      0                      0                    0                    0           	  ++__value;
             .          .          .                      .                      .                      .                      .                    .                    .           	}
           400 ( 0.00%) 0          0                    240 ( 0.00%)             0                      0                      0                    0                    0               }
             .          .          .                      .                      .                      .                      .                    .                    .           #endif
             .          .          .                      .                      .                      .                      .                    .                    .           
             .          .          .                      .                      .                      .                      .                    .                    .           _GLIBCXX_END_NAMESPACE_VERSION
             .          .          .                      .                      .                      .                      .                    .                    .           
             .          .          .                      .                      .                      .                      .                    .                    .           _GLIBCXX_BEGIN_NAMESPACE_ALGO
             .          .          .                      .                      .                      .                      .                    .                    .           
             .          .          .                      .                      .                      .                      .                    .                    .           #if __cplusplus > 201703L
             .          .          .                      .                      .                      .                      .                    .                    .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 110 ----------------------------------------
-- line 126 ----------------------------------------
             .          .          .                      .                      .                      .                      .                    .                    .              *  @param  __first  Start of range.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @param  __last  End of range.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @param  __init  Starting value to add other values to.
             .          .          .                      .                      .                      .                      .                    .                    .              *  @return  The final sum.
             .          .          .                      .                      .                      .                      .                    .                    .              */
             .          .          .                      .                      .                      .                      .                    .                    .             template<typename _InputIterator, typename _Tp>
             .          .          .                      .                      .                      .                      .                    .                    .               _GLIBCXX20_CONSTEXPR
             .          .          .                      .                      .                      .                      .                    .                    .               inline _Tp
        35,398 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)             0                      0                      0                 23,652 ( 0.00%)           0                    0               accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
             .          .          .                      .                      .                      .                      .                    .                    .               {
             .          .          .                      .                      .                      .                      .                    .                    .                 // concept requirements
             .          .          .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
             .          .          .                      .                      .                      .                      .                    .                    .                 __glibcxx_requires_valid_range(__first, __last);
             .          .          .                      .                      .                      .                      .                    .                    .           
42,721,501,184 ( 1.61%) 0          0                  1,600 ( 0.00%)             0                      0          8,544,296,289 ( 1.17%)           0                    0                 for (; __first != __last; ++__first)
21,360,728,540 ( 0.80%) 0          0          8,544,291,896 ( 0.91%) 4,269,066,777 (24.19%) 3,974,211,099 (32.44%) 4,272,145,708 ( 0.59%)           0                    0           	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
         5,993 ( 0.00%) 0          0                  5,913 ( 0.00%)             0                      0                      0                    0                    0                 return __init;
        11,906 ( 0.00%) 0          0                 11,826 ( 0.00%)             0                      0                      0                    0                    0               }
             .          .          .                      .                      .                      .                      .                    .                    .           
             .          .          .                      .                      .                      .                      .                    .                    .             /**
             .          .          .                      .                      .                      .                      .                    .                    .              *  @brief  Accumulate values in a range with operation.
             .          .          .                      .                      .                      .                      .                    .                    .              *
             .          .          .                      .                      .                      .                      .                    .                    .              *  Accumulates the values in the range `[first,last)` using the function
             .          .          .                      .                      .                      .                      .                    .                    .              *  object `__binary_op`.  The initial value is `__init`.  The values are
             .          .          .                      .                      .                      .                      .                    .                    .              *  processed in order.
             .          .          .                      .                      .                      .                      .                    .                    .              *
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/allocated_ptr.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 44 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .             /// Non-standard RAII type for managing pointers obtained from allocators.
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc>
            .          .          .                      .          .          .                      .          .          .               struct __allocated_ptr
            .          .          .                      .          .          .                      .          .          .               {
            .          .          .                      .          .          .                      .          .          .                 using pointer = typename allocator_traits<_Alloc>::pointer;
            .          .          .                      .          .          .                      .          .          .                 using value_type = typename allocator_traits<_Alloc>::value_type;
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Take ownership of __ptr
2,448,296,082 ( 0.09%) 0          0                      0          0          0          1,632,197,388 ( 0.22%) 0          0                 __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
3,264,394,776 ( 0.12%) 2 ( 0.01%) 1 ( 0.01%) 1,632,197,388 ( 0.17%) 0          0          1,224,148,041 ( 0.17%) 0          0                 : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
1,224,148,041 ( 0.05%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0                 { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Convert __ptr to allocator's pointer type and take ownership of it
            .          .          .                      .          .          .                      .          .          .                 template<typename _Ptr,
            .          .          .                      .          .          .                      .          .          .           	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr(_Alloc& __a, _Ptr __ptr)
            .          .          .                      .          .          .                      .          .          .                 : _M_alloc(std::__addressof(__a)),
            .          .          .                      .          .          .                      .          .          .           	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
            .          .          .                      .          .          .                      .          .          .                 { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Transfer ownership of the owned pointer
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr(__allocated_ptr&& __gd) noexcept
            .          .          .                      .          .          .                      .          .          .                 : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
            .          .          .                      .          .          .                      .          .          .                 { __gd._M_ptr = nullptr; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Deallocate the owned pointer
1,632,197,388 ( 0.06%) 0          0                      0          0          0            816,098,694 ( 0.11%) 0          0                 ~__allocated_ptr()
            .          .          .                      .          .          .                      .          .          .                 {
1,632,197,388 ( 0.06%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0           	if (_M_ptr != nullptr)
            .          .          .                      .          .          .                      .          .          .           	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
1,224,148,041 ( 0.05%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0                 }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Release ownership of the owned pointer
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr&
1,632,197,388 ( 0.06%) 0          0                      0          0          0          1,224,148,041 ( 0.17%) 0          0                 operator=(std::nullptr_t) noexcept
            .          .          .                      .          .          .                      .          .          .                 {
  816,098,694 ( 0.03%) 0          0            408,049,347 ( 0.04%) 0          0            408,049,347 ( 0.06%) 0          0           	_M_ptr = nullptr;
  408,049,347 ( 0.02%) 0          0            408,049,347 ( 0.04%) 0          0                      0          0          0           	return *this;
  816,098,694 ( 0.03%) 0          0            816,098,694 ( 0.09%) 0          0                      0          0          0                 }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Get the address that the owned pointer refers to.
            .          .          .                      .          .          .                      .          .          .                 value_type* get() { return std::__to_address(_M_ptr); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               private:
            .          .          .                      .          .          .                      .          .          .                 _Alloc* _M_alloc;
            .          .          .                      .          .          .                      .          .          .                 pointer _M_ptr;
            .          .          .                      .          .          .                      .          .          .               };
-- line 90 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/gcc/src/gcc/libstdc++-v3/libsupc++/new_op.cc
  /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc

--------------------------------------------------------------------------------
Ir                         I1mr           ILmr           Dr                       D1mr                    DLmr                   Dw                       D1mw                 DLmw                 
--------------------------------------------------------------------------------
2,471,618,083,701 (93.11%) 2,536 (15.00%) 1,703 (13.92%) 875,291,681,106 (93.32%) 12,847,799,499 (72.79%) 9,551,273,556 (77.97%) 678,657,880,110 (93.25%) 585,609,891 (96.36%) 568,560,541 (96.83%)  events annotated

