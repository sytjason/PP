--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./linear_traversal_list
Data file:        ./linear_traversal_list_cachegrind
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                       I1mr           ILmr           Dr                       D1mr                   DLmr                   Dw                       D1mw                 DLmw                 
--------------------------------------------------------------------------------
645,208,810,865 (100.0%) 9,459 (100.0%) 7,097 (100.0%) 230,436,243,252 (100.0%) 2,556,049,964 (100.0%) 2,441,485,808 (100.0%) 172,176,981,813 (100.0%) 211,829,352 (100.0%) 210,372,117 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr         ILmr         Dr                      D1mr                   DLmr                   Dw                      D1mw                 DLmw                  file:function
--------------------------------------------------------------------------------
64,668,376,407 (10.02%)   0            0           8,622,454,625 ( 3.74%) 1,584,063,101 (61.97%) 1,478,423,440 (60.55%) 12,933,684,963 ( 7.51%)           0                    0           /usr/include/c++/11.1.0/bits/stl_numeric.h:int std::accumulate<std::_List_iterator<int>, int>(std::_List_iterator<int>, std::_List_iterator<int>, int)
59,434,156,240 ( 9.21%)   0            0          17,830,246,872 ( 7.74%)             0                      0          17,830,246,872 (10.36%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_node<int>::_M_valptr()
56,631,284,568 ( 8.78%)   0            0          28,315,642,284 (12.29%)             0                      0          14,157,821,142 ( 8.22%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::operator!=(std::_List_iterator<int> const&, std::_List_iterator<int> const&)
53,490,740,616 ( 8.29%)  81 ( 0.86%)  53 ( 0.75%) 17,830,246,872 ( 7.74%)             0                      0          17,830,246,872 (10.36%)          79 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr()
51,911,943,413 ( 8.05%)   0            0          33,034,873,081 (14.34%)   628,656,134 (24.59%)   628,655,876 (25.75%) 14,157,802,749 ( 8.22%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::operator++()
51,273,169,300 ( 7.95%)   1 ( 0.01%)   1 ( 0.01%) 20,509,267,720 ( 8.90%)             0                      0          15,381,950,790 ( 8.93%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::operator*() const
35,660,493,744 ( 5.53%)   1 ( 0.01%)   1 ( 0.01%) 17,830,246,872 ( 7.74%)             0                      0          11,886,831,248 ( 6.90%)           0                    0           /usr/include/c++/11.1.0/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_addr()
33,868,083,481 ( 5.25%) 218 ( 2.30%) 164 ( 2.31%)  9,385,132,181 ( 4.07%)   111,777,826 ( 4.37%)   111,776,387 ( 4.58%)  4,080,494,030 ( 2.37%)          80 ( 0.00%)          52 ( 0.00%)  ???:_int_free
18,362,220,615 ( 2.85%)  83 ( 0.88%)  54 ( 0.76%)  5,304,641,511 ( 2.30%)             0                      0           5,304,641,511 ( 3.08%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_node<int>* std::__cxx11::list<int, std::allocator<int> >::_M_create_node<>()
18,288,308,983 ( 2.83%) 220 ( 2.33%) 138 ( 1.94%)  4,896,592,195 ( 2.12%)           480 ( 0.00%)           299 ( 0.00%)  2,281,227,292 ( 1.32%)           0                    0           ???:malloc
16,618,511,838 ( 2.58%) 339 ( 3.58%) 218 ( 3.07%)  3,961,098,019 ( 1.72%)   139,204,103 ( 5.45%)   131,573,460 ( 5.39%)  2,876,464,772 ( 1.67%)  18,587,256 ( 8.77%)  18,587,172 ( 8.84%)  ???:_int_malloc
14,689,886,850 ( 2.28%)   2 ( 0.02%)   2 ( 0.03%)  5,712,733,775 ( 2.48%)             0                      0           3,264,419,300 ( 1.90%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end()
11,833,431,063 ( 1.83%) 133 ( 1.41%) 106 ( 1.49%)  4,080,493,470 ( 1.77%)     2,638,915 ( 0.10%)     2,309,993 ( 0.09%)  1,632,197,388 ( 0.95%)           0                    0           ???:free
10,609,283,022 ( 1.64%)   3 ( 0.03%)   3 ( 0.04%)  2,040,246,735 ( 0.89%)             0                      0           2,448,296,082 ( 1.42%)          79 ( 0.00%)          51 ( 0.00%)  /usr/include/c++/11.1.0/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::allocate(unsigned long, void const*)
10,201,234,875 ( 1.58%)   1 ( 0.01%)   1 ( 0.01%)  4,080,493,950 ( 1.77%)    89,618,089 ( 3.51%)    88,725,477 ( 3.63%)  2,856,345,669 ( 1.66%)           0                    0           /usr/include/c++/11.1.0/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear()
 8,977,085,634 ( 1.39%)   1 ( 0.01%)   1 ( 0.01%)  2,448,296,082 ( 1.06%)             0                      0           2,856,345,429 ( 1.66%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::back()
 8,569,036,287 ( 1.33%)   1 ( 0.01%)   1 ( 0.01%)  2,448,296,082 ( 1.06%)             0                      0           2,856,345,429 ( 1.66%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<>(std::_List_iterator<int>)
 8,161,109,560 ( 1.26%)   2 ( 0.02%)   2 ( 0.03%)  3,264,443,824 ( 1.42%)             0                      0           3,264,443,824 ( 1.90%)          79 ( 0.00%)          52 ( 0.00%)  /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::_List_iterator(std::__detail::_List_node_base*)
 7,344,888,246 ( 1.14%)   0            0           1,632,197,388 ( 0.71%)             0                      0           2,040,246,735 ( 1.18%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::deallocate(std::_List_node<int>*, unsigned long)
 6,936,838,899 ( 1.08%)   1 ( 0.01%)   1 ( 0.01%)  2,448,296,082 ( 1.06%)             0                      0           2,856,345,429 ( 1.66%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::__allocated_ptr(std::allocator<std::_List_node<int> >&, std::_List_node<int>*)
 6,936,838,899 ( 1.08%)   0            0           2,040,246,735 ( 0.89%)             0                      0           2,040,246,735 ( 1.18%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:int& std::__cxx11::list<int, std::allocator<int> >::emplace_back<>()
 6,528,791,152 ( 1.01%)  81 ( 0.86%)  54 ( 0.76%)    816,098,934 ( 0.35%)            80 ( 0.00%)            52 ( 0.00%)  1,632,197,868 ( 0.95%) 147,015,127 (69.40%) 145,792,632 (69.30%)  /usr/include/c++/11.1.0/bits/stl_numeric.h:void std::iota<std::_List_iterator<int>, int>(std::_List_iterator<int>, std::_List_iterator<int>, int)
 6,120,740,205 ( 0.95%)   0            0           2,040,246,735 ( 0.89%)             0                      0           2,040,246,735 ( 1.18%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::deallocate(std::allocator<std::_List_node<int> >&, std::_List_node<int>*, unsigned long)
 5,712,690,858 ( 0.89%)   0            0           1,632,197,388 ( 0.71%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_put_node(std::_List_node<int>*)
 5,304,641,511 ( 0.82%)   2 ( 0.02%)   2 ( 0.03%)  1,632,197,388 ( 0.71%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::allocate(std::allocator<std::_List_node<int> >&, unsigned long)
 5,304,641,511 ( 0.82%)   1 ( 0.01%)   1 ( 0.01%)  1,632,197,388 ( 0.71%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::destroy<int>(std::allocator<std::_List_node<int> >&, int*)
 5,304,641,511 ( 0.82%)   1 ( 0.01%)   1 ( 0.01%)  1,632,197,388 ( 0.71%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::construct<int>(std::allocator<std::_List_node<int> >&, int*)
 5,304,641,511 ( 0.82%)   0            0           2,448,296,082 ( 1.06%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_inc_size(unsigned long)
 5,304,641,511 ( 0.82%)   0            0           1,224,148,041 ( 0.53%)             0                      0           2,040,246,735 ( 1.18%)  46,202,942 (21.81%)  45,985,778 (21.86%)  /usr/include/c++/11.1.0/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::construct<int>(int*)
 4,896,592,164 ( 0.76%)   3 ( 0.03%)   2 ( 0.03%)  1,224,148,041 ( 0.53%)            80 ( 0.00%)            51 ( 0.00%)    816,098,694 ( 0.47%)           0                    0           /build/gcc/src/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 4,896,592,164 ( 0.76%)   1 ( 0.01%)   1 ( 0.01%)  2,448,296,082 ( 1.06%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator()
 4,488,542,817 ( 0.70%)   0            0           2,856,345,429 ( 1.24%)             0                      0           1,224,148,041 ( 0.71%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::_List_iterator<int>::operator--()
 4,488,542,817 ( 0.70%)   0            0           1,632,197,388 ( 0.71%)             0                      0             816,098,694 ( 0.47%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::~__allocated_ptr()
 4,080,493,470 ( 0.63%)   2 ( 0.02%)   2 ( 0.03%)  1,224,148,041 ( 0.53%)             0                      0           1,224,148,041 ( 0.71%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_node()
 3,672,444,123 ( 0.57%)   1 ( 0.01%)   1 ( 0.01%)  1,632,197,388 ( 0.71%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /usr/include/c++/11.1.0/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::operator=(decltype(nullptr))
 3,264,394,776 ( 0.51%)   1 ( 0.01%)   1 ( 0.01%)  1,224,148,041 ( 0.53%)             0                      0           1,632,197,388 ( 0.95%)           0                    0           /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc:std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)
 2,856,345,429 ( 0.44%)   1 ( 0.01%)   1 ( 0.01%)  1,224,148,041 ( 0.53%)             0                      0           1,224,148,041 ( 0.71%)           0                    0           /usr/include/c++/11.1.0/new:operator new(unsigned long, void*)
 2,856,345,429 ( 0.44%)   0            0             816,098,694 ( 0.35%)             0                      0           1,224,148,041 ( 0.71%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::destroy<int>(int*)
 2,448,297,042 ( 0.38%)   0            0           1,224,148,281 ( 0.53%)             0                      0             408,049,587 ( 0.24%)           0                    0           /usr/include/c++/11.1.0/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_default_initialize(unsigned long)
 2,448,296,082 ( 0.38%)   0            0           1,224,148,041 ( 0.53%)             0                      0             816,098,694 ( 0.47%)           0                    0           /usr/include/c++/11.1.0/bits/move.h:std::allocator<std::_List_node<int> >* std::__addressof<std::allocator<std::_List_node<int> > >(std::allocator<std::_List_node<int> >&)
 2,448,296,082 ( 0.38%)   0            0             816,098,694 ( 0.35%)             0                      0             816,098,694 ( 0.47%)           0                    0           /usr/include/c++/11.1.0/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::_M_max_size() const
 1,224,156,792 ( 0.19%) 306 ( 3.24%) 222 ( 3.13%)  1,224,155,939 ( 0.53%)         6,639 ( 0.00%)         1,011 ( 0.00%)             48 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  ???:???
   816,098,694 ( 0.13%)   1 ( 0.01%)   1 ( 0.01%)    408,049,347 ( 0.18%)            80 ( 0.00%)            52 ( 0.00%)              0                    0                    0           /build/gcc/src/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long)
   816,098,694 ( 0.13%)   0            0             408,049,347 ( 0.18%)            80 ( 0.00%)            52 ( 0.00%)              0                    0                    0           /build/gcc/src/gcc/libstdc++-v3/libsupc++/del_op.cc:operator delete(void*)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/stl_list.h
--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                      D1mr                 DLmr                 Dw                      D1mw        DLmw        

-- line 101 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .               /// The %list node header.
             .           .           .                       .                    .                    .                       .           .           .               struct _List_node_header : public _List_node_base
             .           .           .                       .                    .                    .                       .           .           .               {
             .           .           .                       .                    .                    .                       .           .           .           #if _GLIBCXX_USE_CXX11_ABI
             .           .           .                       .                    .                    .                       .           .           .                 std::size_t _M_size;
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
           320 ( 0.00%) 52 ( 0.55%) 52 ( 0.73%)              0                    0                    0                     160 ( 0.00%)  0           0                 _List_node_header() _GLIBCXX_NOEXCEPT
           480 ( 0.00%)  0           0                     240 ( 0.00%)           0                    0                      80 ( 0.00%)  0           0                 { _M_init(); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .                 _List_node_header(_List_node_header&& __x) noexcept
             .           .           .                       .                    .                    .                       .           .           .                 : _List_node_base{ __x._M_next, __x._M_prev }
             .           .           .                       .                    .                    .                       .           .           .           # if _GLIBCXX_USE_CXX11_ABI
             .           .           .                       .                    .                    .                       .           .           .                 , _M_size(__x._M_size)
             .           .           .                       .                    .                    .                       .           .           .           # endif
             .           .           .                       .                    .                    .                       .           .           .                 {
-- line 118 ----------------------------------------
-- line 141 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           	    _M_size = __x._M_size;
             .           .           .                       .                    .                    .                       .           .           .           # endif
             .           .           .                       .                    .                    .                       .           .           .           	    __x._M_init();
             .           .           .                       .                    .                    .                       .           .           .           	  }
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void
           240 ( 0.00%)  0           0                       0                    0                    0                     160 ( 0.00%)  0           0                 _M_init() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
           560 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)            400 ( 0.00%)           0                    0                     160 ( 0.00%) 79 ( 0.00%) 51 ( 0.00%)  	this->_M_next = this->_M_prev = this;
             .           .           .                       .                    .                    .                       .           .           .           #if _GLIBCXX_USE_CXX11_ABI
           160 ( 0.00%)  0           0                      80 ( 0.00%)           0                    0                      80 ( 0.00%)  0           0           	this->_M_size = 0;
             .           .           .                       .                    .                    .                       .           .           .           #endif
           240 ( 0.00%)  0           0                     160 ( 0.00%)           0                    0                       0           0           0                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .               private:
             .           .           .                       .                    .                    .                       .           .           .                 _List_node_base* _M_base() { return this; }
             .           .           .                       .                    .                    .                       .           .           .               };
             .           .           .                       .                    .                    .                       .           .           .             } // namespace detail
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .             /// An actual node in the %list.
             .           .           .                       .                    .                    .                       .           .           .             template<typename _Tp>
             .           .           .                       .                    .                    .                       .           .           .               struct _List_node : public __detail::_List_node_base
             .           .           .                       .                    .                    .                       .           .           .               {
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .                 __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
59,434,156,240 ( 9.21%)  0           0          17,830,246,872 ( 7.74%)           0                    0          17,830,246,872 (10.36%)  0           0                 _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
             .           .           .                       .                    .                    .                       .           .           .                 _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
             .           .           .                       .                    .                    .                       .           .           .           #else
             .           .           .                       .                    .                    .                       .           .           .                 _Tp _M_data;
             .           .           .                       .                    .                    .                       .           .           .                 _Tp*       _M_valptr()       { return std::__addressof(_M_data); }
             .           .           .                       .                    .                    .                       .           .           .                 _Tp const* _M_valptr() const { return std::__addressof(_M_data); }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .               };
             .           .           .                       .                    .                    .                       .           .           .           
-- line 178 ----------------------------------------
-- line 192 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 typedef _Tp				value_type;
             .           .           .                       .                    .                    .                       .           .           .                 typedef _Tp*				pointer;
             .           .           .                       .                    .                    .                       .           .           .                 typedef _Tp&				reference;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _List_iterator() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 : _M_node() { }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 explicit
 3,264,443,824 ( 0.51%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0           2,448,332,868 ( 1.42%) 79 ( 0.00%) 52 ( 0.00%)        _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 4,896,665,736 ( 0.76%)  1 ( 0.01%)  1 ( 0.01%)  3,264,443,824 ( 1.42%)           0                    0             816,110,956 ( 0.47%)  0           0                 : _M_node(__x) { }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Self
             .           .           .                       .                    .                    .                       .           .           .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { return *this; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Must downcast from _List_node_base to _List_node to get to value.
             .           .           .                       .                    .                    .                       .           .           .                 reference
20,509,267,720 ( 3.18%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0          10,254,633,860 ( 5.96%)  0           0                 operator*() const _GLIBCXX_NOEXCEPT
30,763,901,580 ( 4.77%)  0           0          20,509,267,720 ( 8.90%)           0                    0           5,127,316,930 ( 2.98%)  0           0                 { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 pointer
             .           .           .                       .                    .                    .                       .           .           .                 operator->() const _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { return static_cast<_Node*>(_M_node)->_M_valptr(); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Self&
14,157,802,749 ( 2.19%)  0           0                       0                    0                    0           9,438,535,166 ( 5.48%)  0           0                 operator++() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
23,596,337,915 ( 3.66%)  0           0          18,877,070,332 ( 8.19%) 628,656,134 (24.59%) 628,655,876 (25.75%)  4,719,267,583 ( 2.74%)  0           0           	_M_node = _M_node->_M_next;
 4,719,267,583 ( 0.73%)  0           0           4,719,267,583 ( 2.05%)           0                    0                       0           0           0           	return *this;
 9,438,535,166 ( 1.46%)  0           0           9,438,535,166 ( 4.10%)           0                    0                       0           0           0                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Self
             .           .           .                       .                    .                    .                       .           .           .                 operator++(int) _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	_Self __tmp = *this;
             .           .           .                       .                    .                    .                       .           .           .           	_M_node = _M_node->_M_next;
             .           .           .                       .                    .                    .                       .           .           .           	return __tmp;
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Self&
 1,224,148,041 ( 0.19%)  0           0                       0                    0                    0             816,098,694 ( 0.47%)  0           0                 operator--() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
 2,040,246,735 ( 0.32%)  0           0           1,632,197,388 ( 0.71%)           0                    0             408,049,347 ( 0.24%)  0           0           	_M_node = _M_node->_M_prev;
   408,049,347 ( 0.06%)  0           0             408,049,347 ( 0.18%)           0                    0                       0           0           0           	return *this;
   816,098,694 ( 0.13%)  0           0             816,098,694 ( 0.35%)           0                    0                       0           0           0                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Self
             .           .           .                       .                    .                    .                       .           .           .                 operator--(int) _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	_Self __tmp = *this;
             .           .           .                       .                    .                    .                       .           .           .           	_M_node = _M_node->_M_prev;
             .           .           .                       .                    .                    .                       .           .           .           	return __tmp;
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 friend bool
             .           .           .                       .                    .                    .                       .           .           .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { return __x._M_node == __y._M_node; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if __cpp_impl_three_way_comparison < 201907L
             .           .           .                       .                    .                    .                       .           .           .                 friend bool
18,877,094,856 ( 2.93%)  0           0                       0                    0                    0          14,157,821,142 ( 8.22%)  0           0                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
37,754,189,712 ( 5.85%)  0           0          28,315,642,284 (12.29%)           0                    0                       0           0           0                 { return __x._M_node != __y._M_node; }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // The only member points to the %list element.
             .           .           .                       .                    .                    .                       .           .           .                 __detail::_List_node_base* _M_node;
             .           .           .                       .                    .                    .                       .           .           .               };
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .             /**
             .           .           .                       .                    .                    .                       .           .           .              *  @brief A list::const_iterator.
-- line 261 ----------------------------------------
-- line 366 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           	  {
             .           .           .                       .                    .                    .                       .           .           .           	    __first = __first->_M_next;
             .           .           .                       .                    .                    .                       .           .           .           	    ++__n;
             .           .           .                       .                    .                    .                       .           .           .           	  }
             .           .           .                       .                    .                    .                       .           .           .           	return __n;
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
           800 ( 0.00%)  0           0                     240 ( 0.00%)           0                    0                     240 ( 0.00%)  0           0                 struct _List_impl
             .           .           .                       .                    .                    .                       .           .           .                 : public _Node_alloc_type
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	__detail::_List_node_header _M_node;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           	_List_impl() _GLIBCXX_NOEXCEPT_IF(
             .           .           .                       .                    .                    .                       .           .           .           	    is_nothrow_default_constructible<_Node_alloc_type>::value)
             .           .           .                       .                    .                    .                       .           .           .           	: _Node_alloc_type()
             .           .           .                       .                    .                    .                       .           .           .           	{ }
-- line 382 ----------------------------------------
-- line 387 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .           	_List_impl(_List_impl&&) = default;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           	_List_impl(_Node_alloc_type&& __a, _List_impl&& __x)
             .           .           .                       .                    .                    .                       .           .           .           	: _Node_alloc_type(std::move(__a)), _M_node(std::move(__x._M_node))
             .           .           .                       .                    .                    .                       .           .           .           	{ }
             .           .           .                       .                    .                    .                       .           .           .           
           400 ( 0.00%)  0           0                       0                    0                    0                     240 ( 0.00%)  0           0           	_List_impl(_Node_alloc_type&& __a) noexcept
           880 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)            240 ( 0.00%)           0                    0                     240 ( 0.00%)  0           0           	: _Node_alloc_type(std::move(__a))
           240 ( 0.00%)  0           0                     160 ( 0.00%)           0                    0                       0           0           0           	{ }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .                 };
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _List_impl _M_impl;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if _GLIBCXX_USE_CXX11_ABI
             .           .           .                       .                    .                    .                       .           .           .                 size_t _M_get_size() const { return _M_impl._M_node._M_size; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }
             .           .           .                       .                    .                    .                       .           .           .           
 5,304,641,511 ( 0.82%)  0           0           2,448,296,082 ( 1.06%)           0                    0           1,632,197,388 ( 0.95%)  0           0                 void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           # if !_GLIBCXX_INLINE_VERSION
             .           .           .                       .                    .                    .                       .           .           .                 size_t
             .           .           .                       .                    .                    .                       .           .           .                 _M_distance(const __detail::_List_node_base* __first,
             .           .           .                       .                    .                    .                       .           .           .           		  const __detail::_List_node_base* __last) const
             .           .           .                       .                    .                    .                       .           .           .                 { return _S_distance(__first, __last); }
-- line 416 ----------------------------------------
-- line 433 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	return _S_distance(_M_impl._M_node._M_next,
             .           .           .                       .                    .                    .                       .           .           .           			   std::__addressof(_M_impl._M_node));
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           # endif
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 typename _Node_alloc_traits::pointer
 1,632,197,388 ( 0.25%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0             816,098,694 ( 0.47%)  0           0                 _M_get_node()
 2,448,296,082 ( 0.38%)  1 ( 0.01%)  1 ( 0.01%)  1,224,148,041 ( 0.53%)           0                    0             408,049,347 ( 0.24%)  0           0                 { return _Node_alloc_traits::allocate(_M_impl, 1); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void
 2,040,246,735 ( 0.32%)  0           0                       0                    0                    0           1,224,148,041 ( 0.71%)  0           0                 _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 3,672,444,123 ( 0.57%)  0           0           1,632,197,388 ( 0.71%)           0                    0             408,049,347 ( 0.24%)  0           0                 { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .             public:
             .           .           .                       .                    .                    .                       .           .           .                 typedef _Alloc allocator_type;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 _Node_alloc_type&
 2,448,296,082 ( 0.38%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0           1,632,197,388 ( 0.95%)  0           0                 _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 2,448,296,082 ( 0.38%)  0           0           2,448,296,082 ( 1.06%)           0                    0                       0           0           0                 { return _M_impl; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 const _Node_alloc_type&
             .           .           .                       .                    .                    .                       .           .           .                 _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { return _M_impl; }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .                 _List_base() = default;
             .           .           .                       .                    .                    .                       .           .           .           #else
-- line 461 ----------------------------------------
-- line 480 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           # endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Used when allocator is_always_equal.
             .           .           .                       .                    .                    .                       .           .           .                 _List_base(_Node_alloc_type&& __a, _List_base&& __x)
             .           .           .                       .                    .                    .                       .           .           .                 : _M_impl(std::move(__a), std::move(__x._M_impl))
             .           .           .                       .                    .                    .                       .           .           .                 { }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Used when allocator !is_always_equal.
           480 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0                     320 ( 0.00%)  0           0                 _List_base(_Node_alloc_type&& __a)
           560 ( 0.00%)  0           0                     160 ( 0.00%)           0                    0                     160 ( 0.00%)  0           0                 : _M_impl(std::move(__a))
           320 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)            240 ( 0.00%)           0                    0                       0           0           0                 { }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void
             .           .           .                       .                    .                    .                       .           .           .                 _M_move_nodes(_List_base&& __x)
             .           .           .                       .                    .                    .                       .           .           .                 { _M_impl._M_node._M_move_nodes(std::move(__x._M_impl._M_node)); }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // This is what actually destroys the list.
           320 ( 0.00%)  0           0                       0                    0                    0                     160 ( 0.00%)  0           0                 ~_List_base() _GLIBCXX_NOEXCEPT
           720 ( 0.00%)  0           0                     320 ( 0.00%)           0                    0                     160 ( 0.00%)  0           0                 { _M_clear(); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void
             .           .           .                       .                    .                    .                       .           .           .                 _M_clear() _GLIBCXX_NOEXCEPT;
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 void
             .           .           .                       .                    .                    .                       .           .           .                 _M_init() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { this->_M_impl._M_node._M_init(); }
             .           .           .                       .                    .                    .                       .           .           .               };
-- line 507 ----------------------------------------
-- line 624 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           	    _M_put_node(__p);
             .           .           .                       .                    .                    .                       .           .           .           	    __throw_exception_again;
             .           .           .                       .                    .                    .                       .           .           .           	  }
             .           .           .                       .                    .                    .                       .           .           .           	return __p;
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           #else
             .           .           .                       .                    .                    .                       .           .           .                 template<typename... _Args>
             .           .           .                       .                    .                    .                       .           .           .           	_Node*
 3,264,394,776 ( 0.51%)  1 ( 0.01%)  1 ( 0.01%)    408,049,347 ( 0.18%)           0                    0           1,632,197,388 ( 0.95%)  0           0           	_M_create_node(_Args&&... __args)
             .           .           .                       .                    .                    .                       .           .           .           	{
 1,632,197,388 ( 0.25%)  0           0             408,049,347 ( 0.18%)           0                    0             816,098,694 ( 0.47%)  0           0           	  auto __p = this->_M_get_node();
 1,632,197,388 ( 0.25%)  0           0             408,049,347 ( 0.18%)           0                    0             816,098,694 ( 0.47%)  0           0           	  auto& __alloc = _M_get_Node_allocator();
 2,448,296,082 ( 0.38%) 80 ( 0.85%) 52 ( 0.73%)    816,098,694 ( 0.35%)           0                    0             408,049,347 ( 0.24%)  0           0           	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 3,264,394,776 ( 0.51%)  0           0             816,098,694 ( 0.35%)           0                    0             816,098,694 ( 0.47%)  0           0           	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
             .           .           .                       .                    .                    .                       .           .           .           					std::forward<_Args>(__args)...);
 1,632,197,388 ( 0.25%)  0           0                       0                    0                    0             408,049,347 ( 0.24%)  0           0           	  __guard = nullptr;
   816,098,694 ( 0.13%)  0           0             408,049,347 ( 0.18%)           0                    0                       0           0           0           	  return __p;
 3,672,444,123 ( 0.57%)  2 ( 0.02%)  1 ( 0.01%)  2,040,246,735 ( 0.89%)           0                    0             408,049,347 ( 0.24%)  0           0           	}
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if _GLIBCXX_USE_CXX11_ABI
             .           .           .                       .                    .                    .                       .           .           .                 static size_t
             .           .           .                       .                    .                    .                       .           .           .                 _S_distance(const_iterator __first, const_iterator __last)
             .           .           .                       .                    .                    .                       .           .           .                 { return std::distance(__first, __last); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // return the stored size
-- line 649 ----------------------------------------
-- line 688 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                  *  @brief  Creates a %list with default constructed elements.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __n  The number of elements to initially create.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __a  An allocator object.
             .           .           .                       .                    .                    .                       .           .           .                  *
             .           .           .                       .                    .                    .                       .           .           .                  *  This constructor fills the %list with @a __n default
             .           .           .                       .                    .                    .                       .           .           .                  *  constructed elements.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 explicit
           800 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)             80 ( 0.00%)           0                    0                     480 ( 0.00%)  0           0                 list(size_type __n, const allocator_type& __a = allocator_type())
         1,040 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)            160 ( 0.00%)           0                    0                     240 ( 0.00%)  0           0                 : _Base(_Node_alloc_type(__a))
           960 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)            560 ( 0.00%)         160 ( 0.00%)         104 ( 0.00%)             80 ( 0.00%)  0           0                 { _M_default_initialize(__n); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  @brief  Creates a %list with copies of an exemplar element.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __n  The number of elements to initially create.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __value  An element to copy.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __a  An allocator object.
             .           .           .                       .                    .                    .                       .           .           .                  *
             .           .           .                       .                    .                    .                       .           .           .                  *  This constructor fills the %list with @a __n copies of @a __value.
-- line 706 ----------------------------------------
-- line 819 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  No explicit dtor needed as the _Base dtor takes care of
             .           .           .                       .                    .                    .                       .           .           .                  *  things.  The _Base dtor only erases the elements, and note
             .           .           .                       .                    .                    .                       .           .           .                  *  that if the elements themselves are pointers, the pointed-to
             .           .           .                       .                    .                    .                       .           .           .                  *  memory is not touched in any way.  Managing the pointer is
             .           .           .                       .                    .                    .                       .           .           .                  *  the user's responsibility.
             .           .           .                       .                    .                    .                       .           .           .                  */
           800 ( 0.00%)  0           0                     240 ( 0.00%)          80 ( 0.00%)          52 ( 0.00%)            240 ( 0.00%)  0           0                 ~list() = default;
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  @brief  %List assignment operator.
             .           .           .                       .                    .                    .                       .           .           .                  *  @param  __x  A %list of identical element and allocator types.
             .           .           .                       .                    .                    .                       .           .           .                  *
             .           .           .                       .                    .                    .                       .           .           .                  *  All the elements of @a __x are copied.
             .           .           .                       .                    .                    .                       .           .           .                  *
-- line 835 ----------------------------------------
-- line 937 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 { return allocator_type(_Base::_M_get_Node_allocator()); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // iterators
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read/write iterator that points to the first element in the
             .           .           .                       .                    .                    .                       .           .           .                  *  %list.  Iteration is done in ordinary element order.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 iterator
        42,917 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)          6,131 ( 0.00%)           0                    0                  18,393 ( 0.00%)  0           0                 begin() _GLIBCXX_NOEXCEPT
        73,572 ( 0.00%)  0           0                  42,917 ( 0.00%)       6,051 ( 0.00%)         632 ( 0.00%)          6,131 ( 0.00%)  0           0                 { return iterator(this->_M_impl._M_node._M_next); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read-only (constant) iterator that points to the
             .           .           .                       .                    .                    .                       .           .           .                  *  first element in the %list.  Iteration is done in ordinary
             .           .           .                       .                    .                    .                       .           .           .                  *  element order.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 const_iterator
             .           .           .                       .                    .                    .                       .           .           .                 begin() const _GLIBCXX_NOEXCEPT
-- line 954 ----------------------------------------
-- line 955 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 { return const_iterator(this->_M_impl._M_node._M_next); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read/write iterator that points one past the last
             .           .           .                       .                    .                    .                       .           .           .                  *  element in the %list.  Iteration is done in ordinary element
             .           .           .                       .                    .                    .                       .           .           .                  *  order.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 iterator
 5,712,733,775 ( 0.89%)  2 ( 0.02%)  2 ( 0.03%)    816,104,825 ( 0.35%)           0                    0           2,448,314,475 ( 1.42%)  0           0                 end() _GLIBCXX_NOEXCEPT
 8,977,153,075 ( 1.39%)  0           0           4,896,628,950 ( 2.12%)           0                    0             816,104,825 ( 0.47%)  0           0                 { return iterator(&this->_M_impl._M_node); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read-only (constant) iterator that points one past
             .           .           .                       .                    .                    .                       .           .           .                  *  the last element in the %list.  Iteration is done in ordinary
             .           .           .                       .                    .                    .                       .           .           .                  *  element order.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 const_iterator
             .           .           .                       .                    .                    .                       .           .           .                 end() const _GLIBCXX_NOEXCEPT
-- line 972 ----------------------------------------
-- line 1122 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 front() const _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 { return *begin(); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read/write reference to the data at the last element
             .           .           .                       .                    .                    .                       .           .           .                  *  of the %list.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 reference
 2,856,345,429 ( 0.44%)  1 ( 0.01%)  1 ( 0.01%)    408,049,347 ( 0.18%)           0                    0           1,224,148,041 ( 0.71%)  0           0                 back() _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
 1,632,197,388 ( 0.25%)  0           0             408,049,347 ( 0.18%)           0                    0             816,098,694 ( 0.47%)  0           0           	iterator __tmp = end();
 1,224,148,041 ( 0.19%)  0           0                       0                    0                    0             408,049,347 ( 0.24%)  0           0           	--__tmp;
 1,224,148,041 ( 0.19%)  0           0                       0                    0                    0             408,049,347 ( 0.24%)  0           0           	return *__tmp;
 2,040,246,735 ( 0.32%)  0           0           1,632,197,388 ( 0.71%)           0                    0                       0           0           0                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  Returns a read-only (constant) reference to the data at the last
             .           .           .                       .                    .                    .                       .           .           .                  *  element of the %list.
             .           .           .                       .                    .                    .                       .           .           .                  */
             .           .           .                       .                    .                    .                       .           .           .                 const_reference
             .           .           .                       .                    .                    .                       .           .           .                 back() const _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
-- line 1143 ----------------------------------------
-- line 1217 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 { this->_M_insert(end(), std::move(__x)); }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 template<typename... _Args>
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus > 201402L
             .           .           .                       .                    .                    .                       .           .           .           	reference
             .           .           .                       .                    .                    .                       .           .           .           #else
             .           .           .                       .                    .                    .                       .           .           .           	void
             .           .           .                       .                    .                    .                       .           .           .           #endif
 1,632,197,388 ( 0.25%)  0           0                       0                    0                    0             816,098,694 ( 0.47%)  0           0           	emplace_back(_Args&&... __args)
             .           .           .                       .                    .                    .                       .           .           .           	{
 3,264,394,776 ( 0.51%)  0           0             816,098,694 ( 0.35%)           0                    0             816,098,694 ( 0.47%)  0           0           	  this->_M_insert(end(), std::forward<_Args>(__args)...);
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus > 201402L
 1,224,148,041 ( 0.19%)  0           0             408,049,347 ( 0.18%)           0                    0             408,049,347 ( 0.24%)  0           0           	return back();
             .           .           .                       .                    .                    .                       .           .           .           #endif
   816,098,694 ( 0.13%)  0           0             816,098,694 ( 0.35%)           0                    0                       0           0           0           	}
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 /**
             .           .           .                       .                    .                    .                       .           .           .                  *  @brief  Removes last element.
             .           .           .                       .                    .                    .                       .           .           .                  *
             .           .           .                       .                    .                    .                       .           .           .                  *  This is a typical stack operation.  It shrinks the %list by
             .           .           .                       .                    .                    .                       .           .           .                  *  one.  Due to the nature of a %list this operation can be done
             .           .           .                       .                    .                    .                       .           .           .                  *  in constant time, and only invalidates iterators/references to
-- line 1239 ----------------------------------------
-- line 1850 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	for (; __n; --__n)
             .           .           .                       .                    .                    .                       .           .           .           	  push_back(__x);
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .           #if __cplusplus >= 201103L
             .           .           .                       .                    .                    .                       .           .           .                 // Called by list(n).
             .           .           .                       .                    .                    .                       .           .           .                 void
           400 ( 0.00%)  0           0                       0                    0                    0                     240 ( 0.00%)  0           0                 _M_default_initialize(size_type __n)
             .           .           .                       .                    .                    .                       .           .           .                 {
 1,224,148,281 ( 0.19%)  0           0             816,098,774 ( 0.35%)           0                    0                       0           0           0           	for (; __n; --__n)
 1,224,148,041 ( 0.19%)  0           0             408,049,347 ( 0.18%)           0                    0             408,049,347 ( 0.24%)  0           0           	  emplace_back();
           320 ( 0.00%)  0           0                     160 ( 0.00%)           0                    0                       0           0           0                 }
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Called by resize(sz).
             .           .           .                       .                    .                    .                       .           .           .                 void
             .           .           .                       .                    .                    .                       .           .           .                 _M_default_append(size_type __n);
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Internal assign functions follow.
             .           .           .                       .                    .                    .                       .           .           .           
-- line 1870 ----------------------------------------
-- line 1901 ----------------------------------------
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	_Node* __tmp = _M_create_node(__x);
             .           .           .                       .                    .                    .                       .           .           .           	__tmp->_M_hook(__position._M_node);
             .           .           .                       .                    .                    .                       .           .           .           	this->_M_inc_size(1);
             .           .           .                       .                    .                    .                       .           .           .                 }
             .           .           .                       .                    .                    .                       .           .           .           #else
             .           .           .                       .                    .                    .                       .           .           .                template<typename... _Args>
             .           .           .                       .                    .                    .                       .           .           .                  void
 2,040,246,735 ( 0.32%)  1 ( 0.01%)  1 ( 0.01%)              0                    0                    0           1,224,148,041 ( 0.71%)  0           0                  _M_insert(iterator __position, _Args&&... __args)
             .           .           .                       .                    .                    .                       .           .           .                  {
 1,632,197,388 ( 0.25%)  0           0             408,049,347 ( 0.18%)           0                    0             816,098,694 ( 0.47%)  0           0           	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 2,040,246,735 ( 0.32%)  0           0             816,098,694 ( 0.35%)           0                    0             408,049,347 ( 0.24%)  0           0           	 __tmp->_M_hook(__position._M_node);
 1,632,197,388 ( 0.25%)  0           0             408,049,347 ( 0.18%)           0                    0             408,049,347 ( 0.24%)  0           0           	 this->_M_inc_size(1);
 1,224,148,041 ( 0.19%)  0           0             816,098,694 ( 0.35%)           0                    0                       0           0           0                  }
             .           .           .                       .                    .                    .                       .           .           .           #endif
             .           .           .                       .                    .                    .                       .           .           .           
             .           .           .                       .                    .                    .                       .           .           .                 // Erases element at position given.
             .           .           .                       .                    .                    .                       .           .           .                 void
             .           .           .                       .                    .                    .                       .           .           .                 _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
             .           .           .                       .                    .                    .                       .           .           .                 {
             .           .           .                       .                    .                    .                       .           .           .           	this->_M_dec_size(1);
             .           .           .                       .                    .                    .                       .           .           .           	__position._M_node->_M_unhook();
-- line 1922 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw                DLmw                

-- line 71 ----------------------------------------
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .                   .                   .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                   .                   .                 // 2103. propagate_on_container_move_assignment
            .          .          .                      .          .          .                      .                   .                   .                 typedef std::true_type propagate_on_container_move_assignment;
            .          .          .                      .          .          .                      .                   .                   .           #endif
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 _GLIBCXX20_CONSTEXPR
          960 ( 0.00%) 3 ( 0.03%) 3 ( 0.04%)           320 ( 0.00%) 0          0                    320 ( 0.00%)          0                   0                 new_allocator() _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 _GLIBCXX20_CONSTEXPR
          560 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)           160 ( 0.00%) 0          0                    240 ( 0.00%)          0                   0                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 template<typename _Tp1>
            .          .          .                      .          .          .                      .                   .                   .           	_GLIBCXX20_CONSTEXPR
            .          .          .                      .          .          .                      .                   .                   .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #if __cplusplus <= 201703L
        1,440 ( 0.00%) 0          0                    480 ( 0.00%) 0          0                    480 ( 0.00%)          0                   0                 ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 pointer
            .          .          .                      .          .          .                      .                   .                   .                 address(reference __x) const _GLIBCXX_NOEXCEPT
            .          .          .                      .          .          .                      .                   .                   .                 { return std::__addressof(__x); }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 const_pointer
            .          .          .                      .          .          .                      .                   .                   .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
            .          .          .                      .          .          .                      .                   .                   .                 { return std::__addressof(__x); }
            .          .          .                      .          .          .                      .                   .                   .           #endif
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
            .          .          .                      .          .          .                      .                   .                   .                 // about what the return value is when __n == 0.
            .          .          .                      .          .          .                      .                   .                   .                 _GLIBCXX_NODISCARD _Tp*
2,448,296,082 ( 0.38%) 2 ( 0.02%) 2 ( 0.03%)             0          0          0          1,632,197,388 ( 0.95%)          0                   0                 allocate(size_type __n, const void* = static_cast<const void*>(0))
            .          .          .                      .          .          .                      .                   .                   .                 {
4,080,493,470 ( 0.63%) 0          0            816,098,694 ( 0.35%) 0          0            408,049,347 ( 0.24%)         79 ( 0.00%)         51 ( 0.00%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
            .          .          .                      .          .          .                      .                   .                   .           	  {
            .          .          .                      .          .          .                      .                   .                   .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                   .                   .           	    // 3190. allocator::allocate sometimes returns too little storage
            .          .          .                      .          .          .                      .                   .                   .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
            .          .          .                      .          .          .                      .                   .                   .           	      std::__throw_bad_array_new_length();
            .          .          .                      .          .          .                      .                   .                   .           	    std::__throw_bad_alloc();
            .          .          .                      .          .          .                      .                   .                   .           	  }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #if __cpp_aligned_new
            .          .          .                      .          .          .                      .                   .                   .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
            .          .          .                      .          .          .                      .                   .                   .           	  {
            .          .          .                      .          .          .                      .                   .                   .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
            .          .          .                      .          .          .                      .                   .                   .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
            .          .          .                      .          .          .                      .                   .                   .           	  }
            .          .          .                      .          .          .                      .                   .                   .           #endif
3,264,394,776 ( 0.51%) 1 ( 0.01%) 1 ( 0.01%)   408,049,347 ( 0.18%) 0          0            408,049,347 ( 0.24%)          0                   0           	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  816,098,694 ( 0.13%) 0          0            816,098,694 ( 0.35%) 0          0                      0                   0                   0                 }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 // __p is not permitted to be a null pointer.
            .          .          .                      .          .          .                      .                   .                   .                 void
2,448,296,082 ( 0.38%) 0          0                      0          0          0          1,632,197,388 ( 0.95%)          0                   0                 deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
            .          .          .                      .          .          .                      .                   .                   .                 {
            .          .          .                      .          .          .                      .                   .                   .           #if __cpp_aligned_new
            .          .          .                      .          .          .                      .                   .                   .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
            .          .          .                      .          .          .                      .                   .                   .           	  {
            .          .          .                      .          .          .                      .                   .                   .           	    ::operator delete(__p,
            .          .          .                      .          .          .                      .                   .                   .           # if __cpp_sized_deallocation
            .          .          .                      .          .          .                      .                   .                   .           			      __t * sizeof(_Tp),
            .          .          .                      .          .          .                      .                   .                   .           # endif
            .          .          .                      .          .          .                      .                   .                   .           			      std::align_val_t(alignof(_Tp)));
            .          .          .                      .          .          .                      .                   .                   .           	    return;
            .          .          .                      .          .          .                      .                   .                   .           	  }
            .          .          .                      .          .          .                      .                   .                   .           #endif
4,080,493,470 ( 0.63%) 0          0            816,098,694 ( 0.35%) 0          0            408,049,347 ( 0.24%)          0                   0           	::operator delete(__p
            .          .          .                      .          .          .                      .                   .                   .           #if __cpp_sized_deallocation
            .          .          .                      .          .          .                      .                   .                   .           			  , __t * sizeof(_Tp)
            .          .          .                      .          .          .                      .                   .                   .           #endif
            .          .          .                      .          .          .                      .                   .                   .           			 );
  816,098,694 ( 0.13%) 0          0            816,098,694 ( 0.35%) 0          0                      0                   0                   0                 }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #if __cplusplus <= 201703L
            .          .          .                      .          .          .                      .                   .                   .                 size_type
            .          .          .                      .          .          .                      .                   .                   .                 max_size() const _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .                   .                   .                 { return _M_max_size(); }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                      .                   .                   .                 template<typename _Up, typename... _Args>
            .          .          .                      .          .          .                      .                   .                   .           	void
2,040,246,735 ( 0.32%) 0          0                      0          0          0          1,224,148,041 ( 0.71%)          0                   0           	construct(_Up* __p, _Args&&... __args)
            .          .          .                      .          .          .                      .                   .                   .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
3,264,394,776 ( 0.51%) 0          0          1,224,148,041 ( 0.53%) 0          0            816,098,694 ( 0.47%) 46,202,942 (21.81%) 45,985,778 (21.86%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 template<typename _Up>
            .          .          .                      .          .          .                      .                   .                   .           	void
1,632,197,388 ( 0.25%) 0          0                      0          0          0          1,224,148,041 ( 0.71%)          0                   0           	destroy(_Up* __p)
            .          .          .                      .          .          .                      .                   .                   .           	noexcept(std::is_nothrow_destructible<_Up>::value)
1,224,148,041 ( 0.19%) 0          0            816,098,694 ( 0.35%) 0          0                      0                   0                   0           	{ __p->~_Up(); }
            .          .          .                      .          .          .                      .                   .                   .           #else
            .          .          .                      .          .          .                      .                   .                   .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
            .          .          .                      .          .          .                      .                   .                   .                 // 402. wrong new expression in [some_] allocator::construct
            .          .          .                      .          .          .                      .                   .                   .                 void
            .          .          .                      .          .          .                      .                   .                   .                 construct(pointer __p, const _Tp& __val)
            .          .          .                      .          .          .                      .                   .                   .                 { ::new((void *)__p) _Tp(__val); }
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .                 void
-- line 170 ----------------------------------------
-- line 183 ----------------------------------------
            .          .          .                      .          .          .                      .                   .                   .           	friend _GLIBCXX20_CONSTEXPR bool
            .          .          .                      .          .          .                      .                   .                   .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
            .          .          .                      .          .          .                      .                   .                   .           	_GLIBCXX_NOTHROW
            .          .          .                      .          .          .                      .                   .                   .           	{ return false; }
            .          .          .                      .          .          .                      .                   .                   .           #endif
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .               private:
            .          .          .                      .          .          .                      .                   .                   .                 _GLIBCXX_CONSTEXPR size_type
1,224,148,041 ( 0.19%) 0          0                      0          0          0            816,098,694 ( 0.47%)          0                   0                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .                   .                   .                 {
            .          .          .                      .          .          .                      .                   .                   .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
  408,049,347 ( 0.06%) 0          0                      0          0          0                      0                   0                   0           	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
            .          .          .                      .          .          .                      .                   .                   .           #else
            .          .          .                      .          .          .                      .                   .                   .           	return std::size_t(-1) / sizeof(_Tp);
            .          .          .                      .          .          .                      .                   .                   .           #endif
  816,098,694 ( 0.13%) 0          0            816,098,694 ( 0.35%) 0          0                      0                   0                   0                 }
            .          .          .                      .          .          .                      .                   .                   .               };
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           _GLIBCXX_END_NAMESPACE_VERSION
            .          .          .                      .          .          .                      .                   .                   .           } // namespace
            .          .          .                      .          .          .                      .                   .                   .           
            .          .          .                      .          .          .                      .                   .                   .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/allocated_ptr.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 44 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .             /// Non-standard RAII type for managing pointers obtained from allocators.
            .          .          .                      .          .          .                      .          .          .             template<typename _Alloc>
            .          .          .                      .          .          .                      .          .          .               struct __allocated_ptr
            .          .          .                      .          .          .                      .          .          .               {
            .          .          .                      .          .          .                      .          .          .                 using pointer = typename allocator_traits<_Alloc>::pointer;
            .          .          .                      .          .          .                      .          .          .                 using value_type = typename allocator_traits<_Alloc>::value_type;
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Take ownership of __ptr
2,448,296,082 ( 0.38%) 0          0                      0          0          0          1,632,197,388 ( 0.95%) 0          0                 __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
3,264,394,776 ( 0.51%) 1 ( 0.01%) 1 ( 0.01%) 1,632,197,388 ( 0.71%) 0          0          1,224,148,041 ( 0.71%) 0          0                 : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
1,224,148,041 ( 0.19%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0                 { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Convert __ptr to allocator's pointer type and take ownership of it
            .          .          .                      .          .          .                      .          .          .                 template<typename _Ptr,
            .          .          .                      .          .          .                      .          .          .           	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr(_Alloc& __a, _Ptr __ptr)
            .          .          .                      .          .          .                      .          .          .                 : _M_alloc(std::__addressof(__a)),
            .          .          .                      .          .          .                      .          .          .           	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
            .          .          .                      .          .          .                      .          .          .                 { }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Transfer ownership of the owned pointer
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr(__allocated_ptr&& __gd) noexcept
            .          .          .                      .          .          .                      .          .          .                 : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
            .          .          .                      .          .          .                      .          .          .                 { __gd._M_ptr = nullptr; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Deallocate the owned pointer
1,632,197,388 ( 0.25%) 0          0                      0          0          0            816,098,694 ( 0.47%) 0          0                 ~__allocated_ptr()
            .          .          .                      .          .          .                      .          .          .                 {
1,632,197,388 ( 0.25%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0           	if (_M_ptr != nullptr)
            .          .          .                      .          .          .                      .          .          .           	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
1,224,148,041 ( 0.19%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0                 }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Release ownership of the owned pointer
            .          .          .                      .          .          .                      .          .          .                 __allocated_ptr&
1,632,197,388 ( 0.25%) 0          0                      0          0          0          1,224,148,041 ( 0.71%) 0          0                 operator=(std::nullptr_t) noexcept
            .          .          .                      .          .          .                      .          .          .                 {
  816,098,694 ( 0.13%) 0          0            408,049,347 ( 0.18%) 0          0            408,049,347 ( 0.24%) 0          0           	_M_ptr = nullptr;
  408,049,347 ( 0.06%) 1 ( 0.01%) 1 ( 0.01%)   408,049,347 ( 0.18%) 0          0                      0          0          0           	return *this;
  816,098,694 ( 0.13%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0                 }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /// Get the address that the owned pointer refers to.
            .          .          .                      .          .          .                      .          .          .                 value_type* get() { return std::__to_address(_M_ptr); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .               private:
            .          .          .                      .          .          .                      .          .          .                 _Alloc* _M_alloc;
            .          .          .                      .          .          .                      .          .          .                 pointer _M_ptr;
            .          .          .                      .          .          .                      .          .          .               };
-- line 90 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/new
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 167 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
            .          .          .                      .          .          .                      .          .          .           void operator delete[](void*, std::size_t, std::align_val_t)
            .          .          .                      .          .          .                      .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
            .          .          .                      .          .          .                      .          .          .           #endif // __cpp_sized_deallocation
            .          .          .                      .          .          .                      .          .          .           #endif // __cpp_aligned_new
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           // Default placement versions of operator new.
            .          .          .                      .          .          .                      .          .          .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
2,856,345,429 ( 0.44%) 1 ( 0.01%) 1 ( 0.01%) 1,224,148,041 ( 0.53%) 0          0          1,224,148,041 ( 0.71%) 0          0           { return __p; }
            .          .          .                      .          .          .                      .          .          .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
            .          .          .                      .          .          .                      .          .          .           { return __p; }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .           // Default placement versions of operator delete.
            .          .          .                      .          .          .                      .          .          .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .          .          .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
            .          .          .                      .          .          .                      .          .          .           //@}
            .          .          .                      .          .          .                      .          .          .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                      D1mr       DLmr       Dw                      D1mw        DLmw        

-- line 56 ----------------------------------------
             .           .           .                       .          .          .                       .           .           .                 alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 __aligned_membuf() = default;
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 // Can be used to avoid value-initialization zeroing _M_storage.
             .           .           .                       .          .          .                       .           .           .                 __aligned_membuf(std::nullptr_t) { }
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 void*
17,830,246,872 ( 2.76%)  1 ( 0.01%)  1 ( 0.01%)              0          0          0          11,886,831,248 ( 6.90%)  0           0                 _M_addr() noexcept
17,830,246,872 ( 2.76%)  0           0          17,830,246,872 ( 7.74%) 0          0                       0           0           0                 { return static_cast<void*>(&_M_storage); }
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 const void*
             .           .           .                       .          .          .                       .           .           .                 _M_addr() const noexcept
             .           .           .                       .          .          .                       .           .           .                 { return static_cast<const void*>(&_M_storage); }
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 _Tp*
23,773,662,496 ( 3.68%) 81 ( 0.86%) 53 ( 0.75%)              0          0          0          11,886,831,248 ( 6.90%) 79 ( 0.00%) 52 ( 0.00%)        _M_ptr() noexcept
29,717,078,120 ( 4.61%)  0           0          17,830,246,872 ( 7.74%) 0          0           5,943,415,624 ( 3.45%)  0           0                 { return static_cast<_Tp*>(_M_addr()); }
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .                 const _Tp*
             .           .           .                       .          .          .                       .           .           .                 _M_ptr() const noexcept
             .           .           .                       .          .          .                       .           .           .                 { return static_cast<const _Tp*>(_M_addr()); }
             .           .           .                       .          .          .                       .           .           .               };
             .           .           .                       .          .          .                       .           .           .           
             .           .           .                       .          .          .                       .           .           .           #if _GLIBCXX_INLINE_VERSION
             .           .           .                       .          .          .                       .           .           .             template<typename _Tp>
-- line 81 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/list.tcc
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                   D1mr                DLmr                Dw                   D1mw       DLmw       

-- line 58 ----------------------------------------
            .          .          .                    .                   .                   .                    .          .          .           
            .          .          .                    .                   .                   .                    .          .          .           namespace std _GLIBCXX_VISIBILITY(default)
            .          .          .                    .                   .                   .                    .          .          .           {
            .          .          .                    .                   .                   .                    .          .          .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
            .          .          .                    .                   .                   .                    .          .          .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
            .          .          .                    .                   .                   .                    .          .          .           
            .          .          .                    .                   .                   .                    .          .          .             template<typename _Tp, typename _Alloc>
            .          .          .                    .                   .                   .                    .          .          .               void
          320 ( 0.00%) 0          0                    0                   0                   0                  160 ( 0.00%) 0          0               _List_base<_Tp, _Alloc>::
            .          .          .                    .                   .                   .                    .          .          .               _M_clear() _GLIBCXX_NOEXCEPT
            .          .          .                    .                   .                   .                    .          .          .               {
            .          .          .                    .                   .                   .                    .          .          .                 typedef _List_node<_Tp>  _Node;
          240 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         160 ( 0.00%)         80 ( 0.00%)         52 ( 0.00%)          80 ( 0.00%) 0          0                 __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
1,224,148,361 ( 0.19%) 0          0          816,098,854 ( 0.35%)          0                   0                    0          0          0                 while (__cur != &_M_impl._M_node)
            .          .          .                    .                   .                   .                    .          .          .           	{
  816,098,694 ( 0.13%) 0          0          408,049,347 ( 0.18%)          0                   0          408,049,347 ( 0.24%) 0          0           	  _Node* __tmp = static_cast<_Node*>(__cur);
1,224,148,041 ( 0.19%) 0          0          816,098,694 ( 0.35%) 89,617,929 ( 3.51%) 88,725,373 ( 3.63%) 408,049,347 ( 0.24%) 0          0           	  __cur = __tmp->_M_next;
1,632,197,388 ( 0.25%) 0          0          408,049,347 ( 0.18%)          0                   0          816,098,694 ( 0.47%) 0          0           	  _Tp* __val = __tmp->_M_valptr();
            .          .          .                    .                   .                   .                    .          .          .           #if __cplusplus >= 201103L
3,264,394,776 ( 0.51%) 0          0          816,098,694 ( 0.35%)          0                   0          816,098,694 ( 0.47%) 0          0           	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
            .          .          .                    .                   .                   .                    .          .          .           #else
            .          .          .                    .                   .                   .                    .          .          .           	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
            .          .          .                    .                   .                   .                    .          .          .           #endif
2,040,246,735 ( 0.32%) 0          0          816,098,694 ( 0.35%)          0                   0          408,049,347 ( 0.24%) 0          0           	  _M_put_node(__tmp);
            .          .          .                    .                   .                   .                    .          .          .           	}
          320 ( 0.00%) 0          0                  160 ( 0.00%)         80 ( 0.00%)         52 ( 0.00%)           0          0          0               }
            .          .          .                    .                   .                   .                    .          .          .           
            .          .          .                    .                   .                   .                    .          .          .           #if __cplusplus >= 201103L
            .          .          .                    .                   .                   .                    .          .          .             template<typename _Tp, typename _Alloc>
            .          .          .                    .                   .                   .                    .          .          .               template<typename... _Args>
            .          .          .                    .                   .                   .                    .          .          .                 typename list<_Tp, _Alloc>::iterator
            .          .          .                    .                   .                   .                    .          .          .                 list<_Tp, _Alloc>::
            .          .          .                    .                   .                   .                    .          .          .                 emplace(const_iterator __position, _Args&&... __args)
            .          .          .                    .                   .                   .                    .          .          .                 {
-- line 91 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/stl_numeric.h
--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                     D1mr                   DLmr                   Dw                     D1mw                 DLmw                 

-- line 80 ----------------------------------------
             .           .           .                      .                      .                      .                      .                    .                    .              *  @param  __last  End of range.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @param  __value  Starting value.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @return  Nothing.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @ingroup numeric_ops
             .           .           .                      .                      .                      .                      .                    .                    .              */
             .           .           .                      .                      .                      .                      .                    .                    .             template<typename _ForwardIterator, typename _Tp>
             .           .           .                      .                      .                      .                      .                    .                    .               _GLIBCXX20_CONSTEXPR
             .           .           .                      .                      .                      .                      .                    .                    .               void
           560 ( 0.00%)  1 ( 0.01%)  1 ( 0.01%)             0                      0                      0                    400 ( 0.00%)           0                    0               iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
             .           .           .                      .                      .                      .                      .                    .                    .               {
             .           .           .                      .                      .                      .                      .                    .                    .                 // concept requirements
             .           .           .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
             .           .           .                      .                      .                      .                      .                    .                    .           				  _ForwardIterator>)
             .           .           .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_ConvertibleConcept<_Tp,
             .           .           .                      .                      .                      .                      .                    .                    .           	    typename iterator_traits<_ForwardIterator>::value_type>)
             .           .           .                      .                      .                      .                      .                    .                    .                 __glibcxx_requires_valid_range(__first, __last);
             .           .           .                      .                      .                      .                      .                    .                    .           
 4,080,494,110 ( 0.63%) 80 ( 0.85%) 53 ( 0.75%)             0                      0                      0            816,098,774 ( 0.47%)           0                    0                 for (; __first != __last; ++__first)
             .           .           .                      .                      .                      .                      .                    .                    .           	{
 2,040,246,735 ( 0.32%)  0           0            408,049,347 ( 0.18%)             0                      0            816,098,694 ( 0.47%) 147,015,127 (69.40%) 145,792,632 (69.30%)  	  *__first = __value;
   408,049,347 ( 0.06%)  0           0            408,049,347 ( 0.18%)             0                      0                      0                    0                    0           	  ++__value;
             .           .           .                      .                      .                      .                      .                    .                    .           	}
           400 ( 0.00%)  0           0                    240 ( 0.00%)            80 ( 0.00%)            52 ( 0.00%)             0                    0                    0               }
             .           .           .                      .                      .                      .                      .                    .                    .           #endif
             .           .           .                      .                      .                      .                      .                    .                    .           
             .           .           .                      .                      .                      .                      .                    .                    .           _GLIBCXX_END_NAMESPACE_VERSION
             .           .           .                      .                      .                      .                      .                    .                    .           
             .           .           .                      .                      .                      .                      .                    .                    .           _GLIBCXX_BEGIN_NAMESPACE_ALGO
             .           .           .                      .                      .                      .                      .                    .                    .           
             .           .           .                      .                      .                      .                      .                    .                    .           #if __cplusplus > 201703L
             .           .           .                      .                      .                      .                      .                    .                    .           // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 110 ----------------------------------------
-- line 126 ----------------------------------------
             .           .           .                      .                      .                      .                      .                    .                    .              *  @param  __first  Start of range.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @param  __last  End of range.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @param  __init  Starting value to add other values to.
             .           .           .                      .                      .                      .                      .                    .                    .              *  @return  The final sum.
             .           .           .                      .                      .                      .                      .                    .                    .              */
             .           .           .                      .                      .                      .                      .                    .                    .             template<typename _InputIterator, typename _Tp>
             .           .           .                      .                      .                      .                      .                    .                    .               _GLIBCXX20_CONSTEXPR
             .           .           .                      .                      .                      .                      .                    .                    .               inline _Tp
        36,706 ( 0.00%)  0           0                      0                      0                      0                 24,524 ( 0.00%)           0                    0               accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
             .           .           .                      .                      .                      .                      .                    .                    .               {
             .           .           .                      .                      .                      .                      .                    .                    .                 // concept requirements
             .           .           .                      .                      .                      .                      .                    .                    .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
             .           .           .                      .                      .                      .                      .                    .                    .                 __glibcxx_requires_valid_range(__first, __last);
             .           .           .                      .                      .                      .                      .                    .                    .           
43,112,233,008 ( 6.68%)  0           0                  1,600 ( 0.00%)             0                      0          8,622,442,523 ( 5.01%)           0                    0                 for (; __first != __last; ++__first)
21,556,093,580 ( 3.34%)  0           0          8,622,437,912 ( 3.74%) 1,584,063,101 (61.97%) 1,478,423,440 (60.55%) 4,311,218,716 ( 2.50%)           0                    0           	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
         6,211 ( 0.00%)  0           0                  6,131 ( 0.00%)             0                      0                      0                    0                    0                 return __init;
        12,342 ( 0.00%)  0           0                 12,262 ( 0.00%)             0                      0                      0                    0                    0               }
             .           .           .                      .                      .                      .                      .                    .                    .           
             .           .           .                      .                      .                      .                      .                    .                    .             /**
             .           .           .                      .                      .                      .                      .                    .                    .              *  @brief  Accumulate values in a range with operation.
             .           .           .                      .                      .                      .                      .                    .                    .              *
             .           .           .                      .                      .                      .                      .                    .                    .              *  Accumulates the values in the range `[first,last)` using the function
             .           .           .                      .                      .                      .                      .                    .                    .              *  object `__binary_op`.  The initial value is `__init`.  The values are
             .           .           .                      .                      .                      .                      .                    .                    .              *  processed in order.
             .           .           .                      .                      .                      .                      .                    .                    .              *
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/move.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                   D1mw       DLmw       

-- line 41 ----------------------------------------
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .             // Used, in C++03 mode too, by allocators, etc.
            .          .          .                      .          .          .                    .          .          .             /**
            .          .          .                      .          .          .                    .          .          .              *  @brief Same as C++11 std::addressof
            .          .          .                      .          .          .                    .          .          .              *  @ingroup utilities
            .          .          .                      .          .          .                    .          .          .              */
            .          .          .                      .          .          .                    .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                    .          .          .               inline _GLIBCXX_CONSTEXPR _Tp*
1,224,148,041 ( 0.19%) 0          0                      0          0          0          816,098,694 ( 0.47%) 0          0               __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
1,224,148,041 ( 0.19%) 0          0          1,224,148,041 ( 0.53%) 0          0                    0          0          0               { return __builtin_addressof(__r); }
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .           #if __cplusplus >= 201103L
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
            .          .          .                      .          .          .                    .          .          .           } // namespace
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .           #include <type_traits> // Brings in std::declval too.
            .          .          .                      .          .          .                    .          .          .           
-- line 58 ----------------------------------------
-- line 96 ----------------------------------------
            .          .          .                      .          .          .                    .          .          .             /**
            .          .          .                      .          .          .                    .          .          .              *  @brief  Convert a value to an rvalue.
            .          .          .                      .          .          .                    .          .          .              *  @param  __t  A thing of arbitrary type.
            .          .          .                      .          .          .                    .          .          .              *  @return The parameter cast to an rvalue-reference to allow moving it.
            .          .          .                      .          .          .                    .          .          .             */
            .          .          .                      .          .          .                    .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                    .          .          .               _GLIBCXX_NODISCARD
            .          .          .                      .          .          .                    .          .          .               constexpr typename std::remove_reference<_Tp>::type&&
        8,277 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)             0          0          0                5,518 ( 0.00%) 0          0               move(_Tp&& __t) noexcept
        8,277 ( 0.00%) 0          0                  8,277 ( 0.00%) 0          0                    0          0          0               { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .             template<typename _Tp>
            .          .          .                      .          .          .                    .          .          .               struct __move_if_noexcept_cond
            .          .          .                      .          .          .                    .          .          .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
            .          .          .                      .          .          .                    .          .          .                               is_copy_constructible<_Tp>>::type { };
            .          .          .                      .          .          .                    .          .          .           
            .          .          .                      .          .          .                    .          .          .             /**
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11.1.0/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr       DLmr       Dw                     D1mw       DLmw       

-- line 451 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Allocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects to allocate space for.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls @c a.allocate(n)
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
2,040,246,735 ( 0.32%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,224,148,041 ( 0.71%) 0          0                 allocate(allocator_type& __a, size_type __n)
3,264,394,776 ( 0.51%) 1 ( 0.01%) 1 ( 0.01%) 1,632,197,388 ( 0.71%) 0          0            408,049,347 ( 0.24%) 0          0                 { return __a.allocate(__n); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Allocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects to allocate space for.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __hint Aid to locality.
            .          .          .                      .          .          .                      .          .          .                  *  @return Memory of suitable size and alignment for @a n objects
            .          .          .                      .          .          .                      .          .          .                  *          of type @c value_type
-- line 468 ----------------------------------------
-- line 483 ----------------------------------------
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Deallocate memory.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to the memory to deallocate.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __n  The number of objects space was allocated for.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls <tt> a.deallocate(p, n) </tt>
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 static _GLIBCXX20_CONSTEXPR void
2,448,296,082 ( 0.38%) 0          0                      0          0          0          1,632,197,388 ( 0.95%) 0          0                 deallocate(allocator_type& __a, pointer __p, size_type __n)
3,672,444,123 ( 0.57%) 0          0          2,040,246,735 ( 0.89%) 0          0            408,049,347 ( 0.24%) 0          0                 { __a.deallocate(__p, __n); }
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Construct an object of type `_Up`
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to memory of suitable size and alignment for
            .          .          .                      .          .          .                      .          .          .                  *	       an object of type `_Up`.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __args Constructor arguments.
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
            .          .          .                      .          .          .                      .          .          .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
            .          .          .                      .          .          .                      .          .          .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 template<typename _Up, typename... _Args>
            .          .          .                      .          .          .                      .          .          .           	static _GLIBCXX20_CONSTEXPR void
2,040,246,735 ( 0.32%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,224,148,041 ( 0.71%) 0          0           	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
            .          .          .                      .          .          .                      .          .          .           		  _Args&&... __args)
            .          .          .                      .          .          .                      .          .          .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
            .          .          .                      .          .          .                      .          .          .           	{
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus <= 201703L
2,040,246,735 ( 0.32%) 0          0            816,098,694 ( 0.35%) 0          0            408,049,347 ( 0.24%) 0          0           	  __a.construct(__p, std::forward<_Args>(__args)...);
            .          .          .                      .          .          .                      .          .          .           #else
            .          .          .                      .          .          .                      .          .          .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
            .          .          .                      .          .          .                      .          .          .           #endif
1,224,148,041 ( 0.19%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0           	}
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  Destroy an object of type @a _Up
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @param  __p  Pointer to the object to destroy
            .          .          .                      .          .          .                      .          .          .                  *
            .          .          .                      .          .          .                      .          .          .                  *  Calls @c __a.destroy(__p).
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 template<typename _Up>
            .          .          .                      .          .          .                      .          .          .           	static _GLIBCXX20_CONSTEXPR void
2,040,246,735 ( 0.32%) 1 ( 0.01%) 1 ( 0.01%)             0          0          0          1,224,148,041 ( 0.71%) 0          0           	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
            .          .          .                      .          .          .                      .          .          .           	noexcept(is_nothrow_destructible<_Up>::value)
            .          .          .                      .          .          .                      .          .          .           	{
            .          .          .                      .          .          .                      .          .          .           #if __cplusplus <= 201703L
2,040,246,735 ( 0.32%) 0          0            816,098,694 ( 0.35%) 0          0            408,049,347 ( 0.24%) 0          0           	  __a.destroy(__p);
            .          .          .                      .          .          .                      .          .          .           #else
            .          .          .                      .          .          .                      .          .          .           	  std::destroy_at(__p);
            .          .          .                      .          .          .                      .          .          .           #endif
1,224,148,041 ( 0.19%) 0          0            816,098,694 ( 0.35%) 0          0                      0          0          0           	}
            .          .          .                      .          .          .                      .          .          .           
            .          .          .                      .          .          .                      .          .          .                 /**
            .          .          .                      .          .          .                      .          .          .                  *  @brief  The maximum supported allocation size
            .          .          .                      .          .          .                      .          .          .                  *  @param  __a  An allocator.
            .          .          .                      .          .          .                      .          .          .                  *  @return @c __a.max_size()
            .          .          .                      .          .          .                      .          .          .                 */
            .          .          .                      .          .          .                      .          .          .                 static _GLIBCXX20_CONSTEXPR size_type
            .          .          .                      .          .          .                      .          .          .                 max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
-- line 543 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/gcc/src/gcc/libstdc++-v3/libsupc++/del_op.cc
  /build/gcc/src/gcc/libstdc++-v3/libsupc++/del_ops.cc
  /build/gcc/src/gcc/libstdc++-v3/libsupc++/new_op.cc
  /build/gcc/src/gcc/libstdc++-v3/src/c++98/list.cc

--------------------------------------------------------------------------------
Ir                       I1mr         ILmr         Dr                       D1mr                   DLmr                   Dw                       D1mw                 DLmw                 
--------------------------------------------------------------------------------
553,428,364,163 (85.78%) 333 ( 3.52%) 249 ( 3.51%) 203,548,340,758 (88.33%) 2,302,343,695 (90.07%) 2,195,805,633 (89.94%) 158,857,306,748 (92.26%) 193,218,385 (91.21%) 191,778,616 (91.16%)  events annotated

